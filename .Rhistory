geom_line( aes(y=npub_SCOPUS), size=2) +
scale_y_continuous(
name = "Number of studies",
sec.axis = sec_axis(~.*2300, name="Number of studies")
)
pubdata <- read.delim("Growth rate science_data.txt", h=T, stringsAsFactors = TRUE) # 99 obs
# Add in publication data for all journals from Scopus
pubdata <- read.delim("Growth rate science_data.txt", h=T, stringsAsFactors = TRUE) # 99 obs
years_filled$npub_SCOPUS <- pubdata$npub_SCOPUS
View(pubdata)
# Add in publication data for all journals from Scopus
pubdata <- read.delim("Growth rate science_data.txt", h=T, stringsAsFactors = TRUE) # 99 obs
# Add in publication data for all journals from Scopus
pubdata <- read.delim("Growth rate science_data.txt", h=T, stringsAsFactors = TRUE) # 99 obs
years_filled$npub_SCOPUS <- pubdata$npub_SCOPUS
View(years_filled)
ggplot(years_filled, aes(x=levels)) +
geom_line(aes(y=frequency), size=2) +
geom_line(aes(y=npub_SCOPUS), size=2) +
scale_y_continuous(
name = "Number of studies",
sec.axis = sec_axis(~.*2300, name="Number of studies")
)
p <- ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300))
p + geom_line(aes(y=npub_SCOPUS, x=year), lwd= 0.5)
p <- ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300))
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300)) +
geom_line(aes(y=npub_SCOPUS, x=year), lwd= 0.5)
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300))
p + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p2 <- p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300))
p2 + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300))
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300)) +
geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p <- ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p2 <- p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300)) +
p2 + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p <- ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p2 <- p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300)) +
p2 + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300)) +
p2 + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p <- ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300)) +
p2 + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300))
p2 <- p + scale_y_continuous(sec.axis = sec_axis(~ . * 2300))
p2
p2
p2 + geom_line(aes(y=years_filled$npub_SCOPUS, x=years_filled$levels), lwd= 0.5)
years_filled$rel_pub_rate <- years_filled$frequency/years_filled$npub_SCOPUS # New column- relative publication rate
View(years_filled)
years_filled$percent_pub_rate <- (years_filled$frequency/years_filled$npub_SCOPUS)*100 # New column- % publication rate
ggplot(years_filled, aes(x=levels, y=percent_pub_rate)) +
xlab("Publication year") +
ylab("Percentage of total studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(years_filled, aes(x=levels, y=percent_pub_rate)) +
xlab("Publication year") +
ylab("Percentage of total studies") +
geom_point() +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS)) +
xlab("Publication year") +
ylab("Total number of publications (SCOPUS)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Line plot
ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS)) +
xlab("Publication year") +
ylab("Total number of publications (SCOPUS)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
View(years_filled)
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS)) +
xlab("Publication year") +
ylab("Total number of publications (SCOPUS)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3200000,200000))
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS)) +
xlab("Publication year") +
ylab("Total number of publications (SCOPUS)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3200000,1000000))
years_filled$pub_rate_mill <- years_filled$npub_SCOPUS/1000000
years_filled$npub_SCOPUS_mill <- years_filled$npub_SCOPUS/1000000
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS_mill)) +
xlab("Publication year") +
ylab("Total number of publications (SCOPUS)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3200000,1000000))
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS_mill)) +
xlab("Publication year") +
ylab("Total number of publications (SCOPUS)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3.2,1))
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS_mill)) +
xlab("Publication year") +
ylab("Total number of publications in SCOPUS (millions))") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3.2,1))
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS_mill)) +
xlab("Publication year") +
ylab("Total number of publications in SCOPUS (millions)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3.2,1))
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS_mill)) +
xlab("Publication year") +
ylab("Total number of publications in SCOPUS (millions)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3.2,1)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Line plot
ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
setwd("C:/Users/Liam/Dropbox/2. Current collaborations/Social stability meta-analysis/Data/Data for R")
library(metafor)
library(orchaRd)
library(ggplot2)
library(ape)
library(rotl)
library(multcomp)
library(dplyr)
data <- read.delim("Social_stability_data_for_R.txt", h=T, stringsAsFactors = TRUE)
data$paper_ID <- as.factor(data$paper_ID)
data$effect_size_ID <- as.factor(data$effect_size_ID)
data$obs <- factor(data$effect_size_ID)
data$experiment_ID <- as.factor(data$experiment_ID)
data$species2 <- factor(data$species)
precision <- sqrt(1/data$variance_zr) # New data column- inverse standard error
data[,"precision"] <- precision
# Remove species and phylogeny
meta4 <- rma.mv(zr_directional, variance_zr, random= list(~ 1|paper_ID, ~1|obs), data= data, method= "REML")
# Funnel plot
par(mai=c(1,1,1,1)) # Edit margin
funnel(meta4, yaxis="seinv", xlab="Effect size (Correlation)", back="white", shade="white", steps= 32, ylim=c(1,32),
xlim=c(-1.5, 1.6), hlines="white", pch=21, col=rgb(0,0,0, max=255), bg=rgb(255,255,255, max=255, alpha=150))
abline(v=0, lty=2) # Add zero line
points(-0.216, 1, pch=21, bg="black", cex=1.5)
segments(-0.3324, 1, -0.0996, 1, lwd=3)
summary(meta4) # Sig negative effect (Mean= -0.21)
tree <- read.tree("tree_final.tre") # Import tree
tree_grafen = compute.brlen(tree, method="Grafen", power=1)
plot(tree_grafen)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
# Just fitness
fitness <- droplevels(data[data$response_cat == "Fitness",]) # 36 obs
fitness$paper_ID <- factor(fitness$paper_ID)
fitness$species <- factor(fitness$species)
fitness_tips <- setdiff(levels(data$species), levels(fitness$species)) # 7 species
fitness_tree <- drop.tip(tree_grafen, fitness_tips)
fitness_matrix <- vcv(fitness_tree, cor=TRUE, model="Brownian")
# Just physiological
phys <- droplevels(data[data$response_cat == "Physiological",]) # 61 obs
phys$paper_ID <- factor(phys$paper_ID)
phys$species <- factor(phys$species)
phys_tips <- setdiff(levels(data$species), levels(phys$species)) # 8 species
phys_tree <- drop.tip(tree_grafen, phys_tips)
phys_matrix <- vcv(phys_tree, cor=TRUE, model="Brownian")
# Overall model
meta_fitness <- rma.mv(zr_directional, variance_zr, random= list(~ 1|species, ~1|obs), data= fitness, method= "REML")
summary(meta_fitness) # No sig effect
# Funnel plot
par(mai=c(1,1,1,1)) # Edit margin
funnel(meta_fitness, yaxis="seinv", xlab="Effect size (Correlation)", back="white", shade="white", hlines="white", pch=21, col=rgb(0,0,0, max=255), bg=rgb(255,255,255, max=255, alpha=150))
funnel(meta_fitness, yaxis="seinv", xlab="Effect size (Correlation)", back="white", shade="white", steps= 32, ylim=c(1,32),
xlim=c(-1.5, 1.6), hlines="white", pch=21, col=rgb(0,0,0, max=255), bg=rgb(255,255,255, max=255, alpha=150))
points(-0.1644, 1, pch=21, bg="black", cex=1.5)
segments(-0.3683, 1, 0.0395, 1, lwd=3)
abline(v=0, lty=2) # Add zero line
# Overall model
meta_phys <- rma.mv(zr_directional, variance_zr, random= list(~ 1|paper_ID, ~1|obs), data= phys, method= "REML")
summary(meta_phys) # Sig negative effect (Mean= -0.22)
# Funnel plot
par(mai=c(1,1,1,1)) # Edit margin
funnel(meta_fitness, yaxis="seinv", xlab="Effect size (Correlation)", back="white", shade="white", steps= 32, ylim=c(1,32),
xlim=c(-1.5, 1.6), hlines="white", pch=21, col=rgb(0,0,0, max=255), bg=rgb(255,255,255, max=255, alpha=150))
funnel(meta_phys, yaxis="seinv", xlab="Effect size (Correlation)", back="white", shade="white", hlines="white", pch=21, col=rgb(0,0,0, max=255), bg=rgb(255,255,255, max=255, alpha=150))
funnel(meta_phys, yaxis="seinv", xlab="Effect size (Correlation)", back="white", shade="white", steps= 12, ylim=c(1,12),
xlim=c(-1.5, 1.6), hlines="white", pch=21, col=rgb(0,0,0, max=255), bg=rgb(255,255,255, max=255, alpha=150))
funnel(meta_phys, yaxis="seinv", xlab="Effect size (Correlation)", back="white", shade="white", steps= 12, ylim=c(1,12),
xlim=c(-1.6, 1.6), hlines="white", pch=21, col=rgb(0,0,0, max=255), bg=rgb(255,255,255, max=255, alpha=150))
abline(v=0, lty=2) # Add zero line
points(-0.2198, 1, pch=21, bg="black", cex=1.5)
segments(-0.3726, 1, -0.067, 1, lwd=3)
setwd("C:/Users/Liam/Dropbox/1. Current active projects/Abiotic stress and fertility meta-analyses/Systematic map/Data")
library(tidyr)
library(dplyr)
library(ape)
library(ggplot2)
library(ggtree)
data <- read.delim("Systematic map all data.txt", h=T, stringsAsFactors = TRUE) # 1654 obs
species <- read.delim("Systematic map species list.txt", h=T, stringsAsFactors = TRUE) # 1191 obs
journals <- read.csv("journalclass_working.csv", h=T, stringsAsFactors = TRUE) # 416 obs
# Make new data frame
data$publication_year <- factor(data$publication_year)
levels <- levels(data$publication_year)
frequency <- tapply(data$publication_year, data$publication_year, length)
years <- data.frame(levels,frequency, row.names = NULL) # 101 obs
years <- droplevels(years[!years$levels == '2021',])
years$levels <- as.numeric(years$levels)
# Fill in missing years
years_filled <- years %>%
complete(levels = 1920:2020, fill=list(frequency=0))
# Line plot
ggplot(years_filled, aes(x=levels, y=frequency)) +
xlab("Publication year") +
ylab("Number of studies") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# Add in publication data for all journals from Scopus
pubdata <- read.delim("Growth rate science_data.txt", h=T, stringsAsFactors = TRUE) # 101 obs
years_filled$npub_SCOPUS <- pubdata$npub_SCOPUS
years_filled$npub_SCOPUS_mill <- years_filled$npub_SCOPUS/1000000
ggplot(years_filled, aes(x=levels, y=npub_SCOPUS_mill)) +
xlab("Publication year") +
ylab("Total number of publications in SCOPUS (millions)") +
geom_line(lwd= 0.5) +
scale_x_continuous(breaks=seq(1920,2020,20)) +
scale_y_continuous(breaks=seq(0,3.2,1)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
library(dplyr)
library(survival)
library(survminer)
install.packages("survminer")
library(survminer)
s <- Surv(lung$time, lung$status)
class(s)
s
head(lung)
sfit <- survfit(Surv(time, status)~sex, data=lung)
sfit
summary(sfit)
surv_pvalue(sfit)
setwd("C:/Users/Liam/Downloads/Amber aquatic data")
library(ape)
library(rotl)
library(metafor)
library(orchaRd)
library(patchwork)
library(tidyverse)
library(multcomp)
library(grid)
library(ggplot2)
library(dplyr)
tree <- read.tree("final_tree")
print(tree$tip.label)
tree_grafen = compute.brlen(tree, method="Grafen", power=1)
plot(tree_grafen, cex=0.6)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
summary(tree)
TEMP = read.csv("TEMPALL1.csv", header=T)
species_column <- TEMP$GENUS.SPECIES
species_columnedit <- data.frame(text = c(species_column))
# Replace spaces with underscores in the 'text' column
species_columnedit$text <- gsub(" ", "_", species_columnedit$text)
# Print the modified data frame
print(species_columnedit)
unique_valuesspecies <- unique(species_columnedit)
# Print the unique values
print(unique_valuesspecies)
# Create a list of unique species
species_list1 <-(unique_valuesspecies)
# Print the list of species
print(species_list1)
write.csv(species_list1, "Specieslist.csv")
data <- read_csv("Specieslist.csv")
species_column <- data$`text`
trimmed_tree <- drop.tip(tree_grafen, tip = setdiff(tree$tip.label,species_column))
plot(trimmed_tree)
plot(trimmed_tree, cex=0.5)
plot(trimmed_tree, cex=0.1)
plot(trimmed_tree, cex=0.4, type="fan")
summary(trimmed_tree)
print(trimmed_tree$tip.label)
phylo_matrix1 <-vcv(trimmed_tree, cor=T)
write.csv(phylo_matrix1, file="phylo_matrix1.csv")
REMTemp=rma.mv(yi=Fishers.ZR,V=Variance.ZR, random=list(~1|Experiment.Code,~1|Paper.code,~1|GENUS.SPECIES,~1|GENUS.SPECIES1,~1|Effect.size.code), R=list(GENUS.SPECIES=phylo_matrix1), method="REML",data=TEMP)
library(dplyr)
# Use n_distinct to get the number of unique values in column 'text'
unique_values_count <- species_columnedit %>% summarise(n_distinct_text = n_distinct(text))
cat("The number of unique values in column 'text' is:", unique_values_count$n_distinct_text, "\n") #The number of unique values in column 'text' is: 234
# Find values in species_columnedit$text not present in trimmed_tree$tip.label
values_not_in_trimmed_tree <- unique(species_columnedit$text)[!(unique(species_columnedit$text) %in% trimmed_tree$tip.label)]
# Display the result
print(values_not_in_trimmed_tree)
# Find values in species_columnedit$text not present in trimmed_tree$tip.label
values_not_in_tree <- unique(species_columnedit$text)[!(unique(species_columnedit$text) %in% tree$tip.label)]
# Display the result
print(values_not_in_tree)
unique_species <- unique(TEMP$GENUS.SPECIES)
num_unique_species <- length(unique_species)
print(num_unique_species)
levels_used_in_meta <- levels(TEMP$GENUS.SPECIES)  # replace meta_data with your meta-analysis dataset
unique_levels_calculated <- levels(factor(TEMP$GENUS.SPECIES))
setdiff(levels_used_in_meta, num_unique_species)
# Checking species names in tree and data file match
levels(species_column) %in% row.names(phylo_matrix1)
View(data)
# Checking species names in tree and data file match
levels(data$text) %in% row.names(phylo_matrix1)
# Checking species names in tree and data file match
data$text <- factor(data$text)
levels(data$text) %in% row.names(phylo_matrix1)
species_columnedit$text <- gsub("^_", "", species_columnedit$text) # Remove underscores from the start of a string
species_columnedit$text <- gsub("_$", "", species_columnedit$text) # Remove underscores at the end of a string
# Create a list of unique species
species_list1 <-(unique_valuesspecies) # 213 species
# Print the list of species
print(species_list1)
View(species_columnedit)
unique_valuesspecies <- unique(species_columnedit)
# Create a list of unique species
species_list1 <-(unique_valuesspecies) # 213 species
write.csv(species_list1, "Specieslist.csv")
# Print the list of species
print(species_list1)
write.csv(species_list1, "Specieslist.csv")
data <- read_csv("Specieslist.csv")
species_column <- data$`text`
trimmed_tree <- drop.tip(tree_grafen, tip = setdiff(tree$tip.label,species_column))
plot(trimmed_tree, cex=0.4, type="fan")
summary(trimmed_tree) # 202 tips, 165 nodes
print(trimmed_tree$tip.label)
phylo_matrix1 <-vcv(trimmed_tree, cor=T)
levels(data$text) %in% row.names(phylo_matrix1)
# Checking species names in tree and data file match
data$text <- factor(data$text)
levels(data$text) %in% row.names(phylo_matrix1)
# Use n_distinct to get the number of unique values in column 'text'
unique_values_count <- species_columnedit %>% summarise(n_distinct_text = n_distinct(text))
cat("The number of unique values in column 'text' is:", unique_values_count$n_distinct_text, "\n") #The number of unique values in column 'text' is: 234
# Find values in species_columnedit$text not present in trimmed_tree$tip.label
values_not_in_trimmed_tree <- unique(species_columnedit$text)[!(unique(species_columnedit$text) %in% trimmed_tree$tip.label)]
# Display the result
print(values_not_in_trimmed_tree)
# Manually changing species names
TEMP$GENUS.SPECIES <- gsub("Cirrhinus_mrigala____________", "Cirrhinus_mrigala", TEMP$GENUS.SPECIES)
# Print the modified data frame
print(species_columnedit)
unique_valuesspecies <- unique(species_columnedit)
# Print the unique values
print(unique_valuesspecies)
# Create a list of unique species
species_list1 <-(unique_valuesspecies) # 213 species
# Print the list of species
print(species_list1)
levels(TEMP$GENUS.SPECIES)
# Manually changing species names
species_columnedit$text <- gsub("Cirrhinus_mrigala____________", "Cirrhinus_mrigala", species_columnedit$text)
unique_valuesspecies <- unique(species_columnedit)
# Print the unique values
print(unique_valuesspecies)
TEMP$GENUS.SPECIES
TEMP$GENUS.SPECIES <- gsub("Cirrhinus mrigala            ", "Cirrhinus_mrigala", TEMP$GENUS.SPECIES)
unique_valuesspecies <- unique(species_columnedit)
# Print the unique values
print(unique_valuesspecies)
TEMP$GENUS.SPECIES
unique_valuesspecies <- unique(species_columnedit)
# Print the unique values
print(unique_valuesspecies)
TEMP$GENUS.SPECIES <- gsub(" ", "_", TEMP$GENUS.SPECIES)
TEMP$GENUS.SPECIES
TEMP$GENUS.SPECIES <- gsub(" ", "_", TEMP$GENUS.SPECIES)
TEMP$GENUS.SPECIES <- gsub("^_", "", TEMP$GENUS.SPECIES)
TEMP$GENUS.SPECIES <- gsub("_$", "", TEMP$GENUS.SPECIES)
# Manually changing species names
species_columnedit$text <- gsub("Cirrhinus_mrigala____________", "Cirrhinus_mrigala", species_columnedit$text)
TEMP$GENUS.SPECIES <- gsub("Cirrhinus mrigala            ", "Cirrhinus_mrigala", TEMP$GENUS.SPECIES)
# Print the modified data frame
print(species_columnedit)
unique_valuesspecies <- unique(species_columnedit)
# Print the unique values
print(unique_valuesspecies)
# Create a list of unique species
species_list1 <-(unique_valuesspecies) # 213 species
# Print the list of species
print(species_list1)
data <- read_csv("Specieslist.csv")
species_column <- data$`text`
trimmed_tree <- drop.tip(tree_grafen, tip = setdiff(tree$tip.label,species_column))
plot(trimmed_tree, cex=0.4, type="fan")
summary(trimmed_tree) # 212 tips, 165 nodes
phylo_matrix1 <-vcv(trimmed_tree, cor=T)
# Checking species names in tree and data file match
data$text <- factor(data$text)
levels(data$text) %in% row.names(phylo_matrix1)
tree <- read.tree("final_tree") # 1191 tips, 870 nodes
TEMP = read.csv("TEMPALL1.csv", header=T)
species_column <- TEMP$GENUS.SPECIES
species_columnedit <- data.frame(text = c(species_column))
# Replace spaces with underscores in the 'text' column
species_columnedit$text <- gsub(" ", "_", species_columnedit$text)
species_columnedit$text <- gsub("^_", "", species_columnedit$text) # Remove underscores from the start of a string
species_columnedit$text <- gsub("_$", "", species_columnedit$text) # Remove underscores at the end of a string
TEMP$GENUS.SPECIES <- gsub(" ", "_", TEMP$GENUS.SPECIES)
TEMP$GENUS.SPECIES <- gsub("^_", "", TEMP$GENUS.SPECIES)
TEMP$GENUS.SPECIES <- gsub("_$", "", TEMP$GENUS.SPECIES)
# Manually changing species names
species_columnedit$text <- gsub("Cirrhinus_mrigala____________", "Cirrhinus_mrigala", species_columnedit$text)
TEMP$GENUS.SPECIES <- gsub("Cirrhinus_mrigala____________", "Cirrhinus_mrigala", TEMP$GENUS.SPECIES)
# Print the modified data frame
print(species_columnedit)
unique_valuesspecies <- unique(species_columnedit)
# Print the unique values
print(unique_valuesspecies)
# Create a list of unique species
species_list1 <-(unique_valuesspecies) # 213 species
write.csv(species_list1, "Specieslist.csv")
data <- read_csv("Specieslist.csv")
species_column <- data$`text`
trimmed_tree <- drop.tip(tree_grafen, tip = setdiff(tree$tip.label,species_column))
summary(trimmed_tree) # 212 tips, 165 nodes
tree_grafen = compute.brlen(tree, method="Grafen", power=1)
trimmed_tree <- drop.tip(tree_grafen, tip = setdiff(tree$tip.label,species_column))
summary(trimmed_tree) # 212 tips, 165 nodes
plot(trimmed_tree, cex=0.4, type="fan")
phylo_matrix1 <-vcv(trimmed_tree, cor=T)
# Checking species names in tree and data file match
data$text <- factor(data$text)
levels(data$text) %in% row.names(phylo_matrix1)
REMTemp=rma.mv(yi=Fishers.ZR,V=Variance.ZR, random=list(~1|Experiment.Code,~1|Paper.code,~1|GENUS.SPECIES,~1|GENUS.SPECIES1,~1|Effect.size.code),
R=list(GENUS.SPECIES=phylo_matrix1), method="REML",data=TEMP)
