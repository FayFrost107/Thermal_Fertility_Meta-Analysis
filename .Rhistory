ls_rep_data$c.ub <- preds.rep.ls$ci.ub
library(ggplot2)
ggplot(data = ls_rep_data, aes(x = c_treattemp, y = pred, col = Life.stage.of.animal, linetype = Life.stage.of.animal)) +
geom_ribbon(aes(ymin = c.lb, ymax = c.ub, fill = Life.stage.of.animal), alpha = 0.15) +
geom_line() +
scale_color_manual(values = c("purple", "orange")) +  # Set colors for the points and lines
scale_fill_manual(values = c("purple", "orange")) +    # Set colors for the ribbons
scale_linetype_manual(values = c("solid", "dashed")) +
theme_bw() +
coord_cartesian(ylim = c(-10,1))+
labs(title = "Predicted temperature effect on reproduction",
x = "Observed temperature devaition from 25C",
y = "Effect size",
color = "Life stage",  # Set the title of the color legend
fill = "Life stage",
linetype = "Life stage")   # Set the title of the fill legend (for ribbons)
meta_sa_ls
summary(meta_treat_ls_nointer)
summary(meta_treat_ls_nointer)
meta_treat_ls_nointer$beta
meta_treat_ls_nointer$b
meta_treat_ls_nointer
#| label: tbl-ls
#| tbl-cap: Non-linear effects of temperature and life stageo animal on mean effect size of reproduction
table <- data.frame(Parameters = c("Linear Treatment Temperature (centered) - Adult","Quadratic Treatment Temperature (centered) - Adult", "Adult (mean)", "Immature (mean)", "Treatment Temperature (centered) - Immature","Quadratic Treatment Temperature (centered) - Immature"),
Est. = round(meta_treat_ls_nointer$b, 4),
`L 95% CI` = round(meta_treat_ls_nointer$ci.lb, 4),
`U 95% CI` = round(meta_treat_ls_nointer$ci.ub, 4),
`p-value` = sapply(round(meta_treat_ls_nointer$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
flextable(table)
#| label: tbl-sals
#| tbl-cap: Non-linear effects of temperature and life stageo animal on mean effect size of reproduction after removing the 5% most extreme effect sizes.
table <- data.frame(Parameters = c("Linear Treatment Temperature (centered) - Adult","Quadratic Treatment Temperature (centered) - Adult", "Adult (mean)", "Immature (mean)", "Treatment Temperature (centered) - Immature","Quadratic Treatment Temperature (centered) - Immature"),
Est. = round(meta_sa_ls$b, 4),
`L 95% CI` = round(meta_sa_ls$ci.lb, 4),
`U 95% CI` = round(meta_sa_ls$ci.ub, 4),
`p-value` = sapply(round(meta_sa_ls$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
flextable(table)
summary(meta_treat_ls_nointer)
#| echo: false
#| warning: false
#| include: false
#| eval: true
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
# source functions
source(here("R", "func.R"))
options(digits = 2)
#| echo: false
#| warning: false
#| include: false
#| eval: true
## rerun all models?
rerun <- TRUE
#| echo: false
#| warning: false
#| include: false
### Read in effect size data
effectdata <- read.csv(here("Data", "Survival project all pairwise.es.csv"))
### select data for analysis
repdata_warm <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Warm" )
repdata_cool <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Cool" )
allrep <- rbind(repdata_warm, repdata_cool)
rdata <- allrep
### Species names which need changing for phylogeny.
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea ashmeadi")]              <- "Gonatocerus ashmeadi"
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea triguttata")]   <- "Gonatocerus triguttatus"
rdata$Species.latin[which(rdata$Species.latin == "Mythimna roseilinea")]            <-  "Mythimna albipuncta"
rdata$Species.latin[which(rdata$Species.latin == "Daphnia australis")]            <-  "Daphniopsis australis"
### Create random factors into data frame
rdata$obs <- factor(c(1:nrow(rdata)))                # Unique observation code
rdata$study_code <- factor(rdata$Paper.code)         # Model requires column names study_code (this is biggest level of nested code structure)
rdata$Species.phylo <- factor(rdata$Species.latin)   # Species names for phylo matrix
rdata$species <- factor(rdata$Species.latin)         # Another species column for ranom factor
precision <- sqrt(1/rdata$v)                         # inverse standard error
rdata[,"precision"] <- precision
str(rdata)
nlevels(rdata$species)    # Check number of species
nlevels(rdata$study_code) # Check number of studies
#### Import Tree #############
tree1 <- read.nexus(here("Phylogeny", "all_rep_excHUM251_tree.nex"))
tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
tree <- ape::multi2di(tree_grafen, random = TRUE)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
# use a randomization approach to deal with polytomies.
# Could this this approach or another detailed here: https://search.r-project.org/CRAN/refmans/RRphylo/html/fix.poly.html
#| echo: false
#| warning: false
#| include: false
#|
# Simple model (no random effects)
if(rerun){
meta1 <- rma.uni(es, v, data= rdata, method= "REML")
summary(meta1)}
#| echo: false
#| warning: false
#| include: false
#|
# Adding four random factors
if(rerun){
meta2 <- rma.mv(es, v, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta2, here("Output", "models", "reproduction", "mv_rep_2.rds"))
} else {
meta2 <- readRDS(here("Output", "models", "reproduction", "mv_rep_2.rds"))
}
#| echo: false
#| warning: false
#| include: false
# Assumes a correlation of 0.5 between effect sizes from the same experiment
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
# Add new variance matrix for shared_control into the mixed-effects meta-analysis model
if(rerun){
meta3 <- rma.mv(es, VCV_shared, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta3, here("Output", "models", "reproduction", "mv_rep_3.rds"))
} else {
meta3 <-  readRDS(here("Output", "models", "reproduction", "mv_rep_3.rds"))
}
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
## without phylogeny or species
meta4 <- rma.mv(es, VCV_shared, random= list(~ 1|study_code, ~1|obs), data= rdata, method= "REML")
saveRDS(meta4, here("Output", "models", "reproduction", "mv_rep_4.rds"))
## without phylogeny
meta5 <- rma.mv(es, VCV_shared, random= list(~ 1|species, ~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta5, here("Output", "models", "reproduction", "mv_rep_5.rds"))
## without phylogeny, species or study_code
meta7 <- rma.mv(es, VCV_shared, random= list(~1|obs), data= rdata, method= "REML")
saveRDS(meta7, here("Output", "models", "reproduction", "mv_rep_7.rds"))
} else {
meta4 <- readRDS(here("Output", "models", "reproduction", "mv_rep_4.rds"))
meta5 <- readRDS(here("Output", "models", "reproduction",  "mv_rep_5.rds"))
meta7 <- readRDS(here("Output", "models", "reproduction", "mv_rep_7.rds"))
}
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
# warm/cool
meta_trait_warm <- rma.mv(es, VCV_shared,  mod= ~warm.cool, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm, here("Output", "models", "reproduction", "mv_rep_warm.rds"))
# warm/cool -1
meta_trait_warm_nointer <- rma.mv(es, VCV_shared,  mod= ~warm.cool-1, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm_nointer, here("Output", "models", "reproduction", "mv_rep_warm-1.rds"))
# ref temp
meta_trait_ref <- rma.mv(es, VCV_shared,  mod= ~reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_ref, here("Output", "models", "reproduction", "mv_rep_ref.rds"))
# treat temp centered
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treattemp, here("Output", "models", "reproduction", "mv_rep_ctemp.rds"))
# treat temp^2 centered
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat2, here("Output", "models", "mv_rep_ctemp2.rds"))
# diff temp
meta_trait_diff <- rma.mv(es, VCV_shared,  mod= ~diff, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_diff, here("Output", "models", "reproduction", "mv_rep_diff.rds"))
### binned treatment max temperatures.
rdata$bin.temp <- c(NA)
rdata$bin.temp[which(rdata$treattemp >= 40)] <- ">40"
rdata$bin.temp[which(rdata$treattemp >= 35 & rdata$treattemp <40)] <- "35-40"
rdata$bin.temp[which(rdata$treattemp >= 30 & rdata$treattemp <35)] <- "30-35"
rdata$bin.temp[which(rdata$treattemp >= 25 & rdata$treattemp <30)] <- "25-30"
rdata$bin.temp[which(rdata$treattemp >= 20 & rdata$treattemp <25)] <- "20-25"
rdata$bin.temp[which(rdata$treattemp >= 15 & rdata$treattemp <20)] <- "15-20"
rdata$bin.temp[which(rdata$treattemp <15)] <- "<15"
rdata$bin.temp <- factor(rdata$bin.temp)
levels(rdata$bin.temp)
table(rdata$bin.temp)
# binned temps
meta_trait_bintemp <- rma.mv(es, VCV_shared,  mod= ~bin.temp-1,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_bintemp, here("Output", "models", "reproduction", "mv_rep_bintemp.rds"))
} else {
meta_trait_warm  <- readRDS(here("Output", "models", "reproduction", "mv_rep_warm.rds"))
meta_trait_warm_nointer  <- readRDS(here("Output", "models", "reproduction", "mv_rep_warm-1.rds"))
meta_trait_ref <- readRDS(here("Output", "models", "reproduction", "mv_rep_ref.rds"))
meta_trait_treattemp  <- readRDS(here("Output", "models", "reproduction", "mv_rep_ctemp.rds"))
meta_trait_treat2  <- readRDS(here("Output", "models", "mv_rep_ctemp2.rds"))
meta_trait_diff <- readRDS(here("Output", "models", "reproduction", "mv_rep_diff.rds"))
meta_trait_bintemp <-  readRDS(here("Output", "models", "reproduction", "mv_rep_bintemp.rds"))
}
#| label: tbl-treat2
#| tbl-cap: Non-linear effects of temperature on mean effect size of reproduction
table <- data.frame(Parameters = c("Reproduction (mean)", "Linear Treatment Temperature (centered) - Reproduction","Quadratic Treatment Temperature (centered) - Reproduction"),
Est. = round(meta_trait_treat2$b, 4),
`L 95% CI` = round(meta_trait_treat2$ci.lb, 4),
`U 95% CI` = round(meta_trait_treat2$ci.ub, 4),
`p-value` = sapply(round(meta_trait_treat2$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
flextable(table)
#| label: fig-treat2
#| fig-cap: Bubble plot of effect size of reproduction when controlling for temperature.
p <- bubble_plot(meta_trait_treat2, mod = "c_treattemp", group="study_code")
p+coord_cartesian(ylim=c(-10,10)) + labs(x = "Temperature deviation from 25C")
#| echo: false
#| warning: false
#| include: false
## Sex exposed
# We could lump categories so that we have cases where males are included (Both, Male), versus cases with just females (Female, Parthenogenetic),
# with Unsure removed. I would predict that the 'Both' category would show the biggest drop for reproduction, but there will be no difference for lifespan
if(rerun){
new_data <- rdata
new_data$Sex.exposed[which(new_data$Sex.exposed == "Male")] <- "Both"
new_data$Sex.exposed[which(new_data$Sex.exposed == "Parthenogenetic")] <- "Female"
new_data <- subset(new_data, Sex.exposed != "Unsure")
VCV_shared_sex <- impute_covariance_matrix(vi=new_data$v, cluster = new_data$shared_control, r=0.5)
meta_treat_sex <- rma.mv(es, VCV_shared_sex,  mod= ~poly(c_treattemp, degree=2, raw=TRUE)*Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
meta_treat_sex_nointer <- rma.mv(es, VCV_shared_sex,  mod= ~poly(c_treattemp, degree=2, raw=TRUE)*Sex.exposed-1,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
saveRDS(meta_treat_sex, here("Output", "models", "reproduction", "meta_treat_rep_sex.rds"))
saveRDS(meta_treat_sex_nointer, here("Output", "models", "reproduction", "meta_treat_rep_sex_nointer.rds"))
saveRDS(new_data, here("Output", "Output data",  "data_rep_sex.rds"))
## Life-stage
# We could lump categories so that we have cases where only adults were exposed (Adult),
# versus cases where immature stages were exposed (Juvenile, Larvae, Pupae, Mix)- perhaps after excluding 'Egg' and 'Embryo' because these categories are a bit weird
ls_data <- rdata
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Juvenile")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Larvae")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Mix")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Pupae")] <- "Immature"
ls_data <- subset(ls_data, Life.stage.of.animal != "Egg")
ls_data <- subset(ls_data, Life.stage.of.animal != "Embryo")
VCV_shared_life <- impute_covariance_matrix(vi=ls_data$v, cluster = ls_data$shared_control, r=0.5)
meta_treat_ls <- rma.mv(es, VCV_shared_life,  mod= ~poly(c_treattemp, degree=2, raw=TRUE)*Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= ls_data, method= "REML")
meta_treat_ls_nointer <- rma.mv(es, VCV_shared_life,  mod= ~ -1 + poly(c_treattemp, degree=2, raw=TRUE)*Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= ls_data, method= "REML")
saveRDS(meta_treat_ls, here("Output", "models", "reproduction", "meta_treat_rep_ls.rds"))
saveRDS(meta_treat_ls_nointer, here("Output", "models", "reproduction", "meta_treat_rep_ls_nointer.rds"))
saveRDS(ls_data, here("Output", "Output data", "data_rep_ls.rds"))
} else {
meta_treat_sex <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_sex.rds"))
meta_treat_sex_nointer <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_sex_nointer.rds"))
new_data <- readRDS(here("Output", "Output data", "data_rep_sex.rds"))
meta_treat_ls <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_ls.rds"))
meta_treat_ls_nointer <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_ls_nointer.rds"))
ls_data <- readRDS(here("Output", "Output data", "data_rep_ls.rds"))
}
#| label: tbl-sex
#| tbl-cap: Non-linear effects of temperature and sex exposed on mean effect size of reproduction
table <- data.frame(Parameters = c("Linear Treatment Temperature (centered) - Both","Quadratic Treatment Temperature (centered) - Both", "Both (mean)", "Females only (mean)", "Treatment Temperature (centered) - Females only","Quadratic Treatment Temperature (centered) - Females only"),
Est. = round(meta_treat_sex_nointer$b, 4),
`L 95% CI` = round(meta_treat_sex_nointer$ci.lb, 4),
`U 95% CI` = round(meta_treat_sex_nointer$ci.ub, 4),
`p-value` = sapply(round(meta_treat_sex_nointer$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
flextable(table)
#| label: fig-figsex
#| fig-cap: Predicited models of sex exposed and temeprature effects on reproduction.
preds.rep.sex <- predict(meta_treat_sex, addx=TRUE)
sex_rep_data <- new_data
sex_rep_data$pred <- preds.rep.sex$pred
sex_rep_data$pred.lb <- preds.rep.sex$pi.lb
sex_rep_data$pred.ub <- preds.rep.sex$pi.ub
sex_rep_data$c.lb <- preds.rep.sex$ci.lb
sex_rep_data$c.ub <- preds.rep.sex$ci.ub
library(ggplot2)
ggplot(data = sex_rep_data, aes(x = c_treattemp, y = pred, col = Sex.exposed, linetype = Sex.exposed)) +
geom_ribbon(aes(ymin = c.lb, ymax = c.ub, fill = Sex.exposed), alpha = 0.15) +
geom_line() +
scale_color_manual(values = c("purple", "orange")) +  # Set colors for the points and lines
scale_fill_manual(values = c("purple", "orange")) +    # Set colors for the ribbons
scale_linetype_manual(values = c("solid", "dashed")) +
theme_bw() +
labs(title = "Predicted emperature effect on reproduction",
x = "Temperature devaition from 25C",
y = "Effect size",
color = "Sex exposed",  # Set the title of the color legend
fill = "Sex exposed",
linetype = "Sex exposed")   # Set the title of the fill legend (for ribbons)
ggplot(data = sex_rep_data, aes(x = c_treattemp, y = es, col = Sex.exposed)) +
geom_point( alpha=0.5)+
scale_color_manual(values = c("purple", "orange")) +  # Set colors for the points and lines
scale_fill_manual(values = c("purple", "orange")) +
theme_bw() +
labs(title = "Observed temperature effect on reproduction",
x = "Temperature devaition from 25C",
y = "Effect size",
color = "Sex exposed")   # Set the title of the fill legend (for ribbons)
#| label: tbl-ls
#| tbl-cap: Non-linear effects of temperature and life stageo animal on mean effect size of reproduction
table <- data.frame(Parameters = c("Linear Treatment Temperature (centered) - Adult","Quadratic Treatment Temperature (centered) - Adult", "Adult (mean)", "Immature (mean)", "Treatment Temperature (centered) - Immature","Quadratic Treatment Temperature (centered) - Immature"),
Est. = round(meta_treat_ls_nointer$b, 4),
`L 95% CI` = round(meta_treat_ls_nointer$ci.lb, 4),
`U 95% CI` = round(meta_treat_ls_nointer$ci.ub, 4),
`p-value` = sapply(round(meta_treat_ls_nointer$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
flextable(table)
#| label: fig-figls
#| fig-cap: Predicited models of sex exposed and temeprature effects on reproduction.
preds.rep.ls <- predict(meta_treat_ls, addx=TRUE)
ls_rep_data <- ls_data
ls_rep_data$pred <- preds.rep.ls$pred
ls_rep_data$pred.lb <- preds.rep.ls$pi.lb
ls_rep_data$pred.ub <- preds.rep.ls$pi.ub
ls_rep_data$c.lb <- preds.rep.ls$ci.lb
ls_rep_data$c.ub <- preds.rep.ls$ci.ub
library(ggplot2)
ggplot(data = ls_rep_data, aes(x = c_treattemp, y = pred, col = Life.stage.of.animal, linetype = Life.stage.of.animal)) +
geom_ribbon(aes(ymin = c.lb, ymax = c.ub, fill = Life.stage.of.animal), alpha = 0.15) +
geom_line() +
scale_color_manual(values = c("purple", "orange")) +  # Set colors for the points and lines
scale_fill_manual(values = c("purple", "orange")) +    # Set colors for the ribbons
scale_linetype_manual(values = c("solid", "dashed")) +
theme_bw() +
coord_cartesian(ylim = c(-10,1))+
labs(title = "Predicted temperature effect on reproduction",
x = "Observed temperature devaition from 25C",
y = "Effect size",
color = "Life stage",  # Set the title of the color legend
fill = "Life stage",
linetype = "Life stage")   # Set the title of the fill legend (for ribbons)
### observed data
ggplot(data = ls_rep_data, aes(x = c_treattemp, y = es, col = Life.stage.of.animal)) +
geom_point( alpha=0.5)+
scale_color_manual(values = c("purple", "orange")) +  # Set colors for the points and lines
scale_fill_manual(values = c("purple", "orange")) +
theme_bw() +
coord_cartesian(ylim = c(-10,1))+
labs(title = "Observed temperature effect on reproduction",
x = "Temperature devaition from 25C",
y = "Effect size",
color = "Life stage")   # Set the title of the fill legend (for ribbons)
#| echo: false
#| warning: false
#| include: false
## Publication Bias.
if(rerun){
meta_year <- rma.mv(es, VCV_shared,  mod= ~Publication.year,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_year, here("Output", "models", "reproduction", "meta_rep_year.rds"))
# Sensitivty Analysis
# Preform a sensitivity analysis by removing the smallest and largest 2.5% of effect sizes.
minq <- quantile(rdata$es, 0.025)
maxq <- quantile(rdata$es, 0.975)
sdata <- subset(rdata, es > minq & es < maxq)
saveRDS(sdata, here("Output", "Output data", "reproduction", "sensitivity_data_rep.rds"))
## Treatment temperature as a quadratic effect (sesnsitivity analysis)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run quadratic model
meta_sa_treat2 <- rma.mv(es, VCV_shared_sa,  mod= ~poly(c_treattemp, degree=2, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
saveRDS(meta_sa_treat2, here("Output", "models", "reproduction", "meta_sa_ctemp2.rds"))
} else {
meta_year <- readRDS(here("Output", "models", "reproduction", "meta_rep_year.rds"))
sdata <- readRDS(here("Output", "Output data", "reproduction", "sensitivity_data_rep.rds"))
meta_sa_treat2 <- readRDS(here("Output", "models", "reproduction", "meta_sa_ctemp2.rds"))
}
## Now we completely remove any study that has an effect size in the highest or lowest 2.5%.
#remove_min <- unique(rdata$Paper.code[which(rdata$es < minq)])
#remove_max <- unique(rdata$Paper.code[which(rdata$es > maxq)])
#remove <- union(remove_min, remove_max)
#subdata <- rdata[!(rdata$Paper.code %in% remove), ]
#VCV_shared_subdata <- impute_covariance_matrix(vi=subdata$v, cluster = subdata$shared_control, r=0.5)
q <- bubble_plot(meta_year, mod = "Publication.year", group="study_code") +
labs(x = "Year of Publication")
q+ coord_cartesian(ylim=c(-20,10))
#| label: tbl-sactemp
#| tbl-cap: Non-linear effects of temperature on mean effect size of reproduction having removed 5% of the most extreme effect sizes.
table <- data.frame(Parameters = c("Reproduction (mean)", "Linear Treatment Temperature (centered) - Reproduction","Quadratic Treatment Temperature (centered) - Reproduction"),
Est. = round(meta_sa_treat2$b, 4),
`L 95% CI` = round(meta_sa_treat2$ci.lb, 4),
`U 95% CI` = round(meta_sa_treat2$ci.ub, 4),
`p-value` = sapply(round(meta_sa_treat2$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
flextable(table)
#| echo: false
#| warning: false
#| include: false
if(rerun){
minq <- quantile(new_data$es, 0.025)
maxq <- quantile(new_data$es, 0.975)
sdata <- subset(new_data, es > minq & es < maxq)
saveRDS(sdata, here("Output", "Output data", "reproduction", "sensitivity_data_rep_sex.rds"))
## Treatment temperature as a quadratic effect (sesnsitivity analysis)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run quadratic model
meta_sa_sex_nointer <- rma.mv(es, VCV_shared_sa,  mod= ~ -1 + poly(c_treattemp, degree=2, raw=TRUE) * Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
saveRDS(meta_sa_sex_nointer, here("Output", "models", "reproduction", "meta_sa_rep_sex.rds"))
} else {
meta_sa_sex <- readRDS(here("Output", "models", "reproduction", "meta_sa_rep_sex.rds"))
sa_rep_sexdata <- readRDS(here("Output", "Output data", "reproduction", "sensitivity_data_rep_sex.rds"))
}
#| label: tbl-sasex
#| tbl-cap: Non-linear effects of temperature and sex exposed on mean effect size of reproduction with 5% most extreme effect sizes removed.
table <- data.frame(Parameters = c("Linear Treatment Temperature (centered) - Both","Quadratic Treatment Temperature (centered) - Both", "Both (mean)", "Females only (mean)", "Treatment Temperature (centered) - Females only","Quadratic Treatment Temperature (centered) - Females only"),
Est. = round(meta_sa_sex$b, 4),
`L 95% CI` = round(meta_sa_sex$ci.lb, 4),
`U 95% CI` = round(meta_sa_sex$ci.ub, 4),
`p-value` = sapply(round(meta_sa_sex$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
#| echo: false
#| warning: false
#| include: false
if(rerun){
minq <- quantile(ls_data$es, 0.025)
maxq <- quantile(ls_data$es, 0.975)
sdata <- subset(ls_data, es > minq & es < maxq)
saveRDS(sdata, here("Output", "Output data", "reproduction", "sensitivity_data_rep_ls.rds"))
## Treatment temperature as a quadratic effect (sesnsitivity analysis)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run quadratic model
meta_sa_ls_nointer <- rma.mv(es, VCV_shared_sa,  mod= ~ -1 + poly(c_treattemp, degree=2, raw=TRUE) * Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
saveRDS(meta_sa_ls_nointer, here("Output", "models", "reproduction", "meta_sa_rep_ls.rds"))
} else {
meta_sa_ls <- readRDS(here("Output", "models", "reproduction", "meta_sa_rep_ls.rds"))
sa_rep_lsdata <- readRDS(here("Output", "Output data", "reproduction", "sensitivity_data_rep_ls.rds"))
}
#| echo: false
#| warning: false
#| include: false
#| eval: true
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
# source functions
source(here("R", "func.R"))
options(digits = 2)
#| echo: false
#| warning: false
#| include: false
### Read in effect size data
effectdata <- read.csv(here("Data", "Survival project all pairwise.es.csv"))
### select data for analysis
repdata_warm <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Warm" )
repdata_cool <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Cool" )
allrep <- rbind(repdata_warm, repdata_cool)
rdata <- allrep
### Species names which need changing for phylogeny.
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea ashmeadi")]              <- "Gonatocerus ashmeadi"
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea triguttata")]   <- "Gonatocerus triguttatus"
rdata$Species.latin[which(rdata$Species.latin == "Mythimna roseilinea")]            <-  "Mythimna albipuncta"
rdata$Species.latin[which(rdata$Species.latin == "Daphnia australis")]            <-  "Daphniopsis australis"
### Create random factors into data frame
rdata$obs <- factor(c(1:nrow(rdata)))                # Unique observation code
rdata$study_code <- factor(rdata$Paper.code)         # Model requires column names study_code (this is biggest level of nested code structure)
rdata$Species.phylo <- factor(rdata$Species.latin)   # Species names for phylo matrix
rdata$species <- factor(rdata$Species.latin)         # Another species column for ranom factor
precision <- sqrt(1/rdata$v)                         # inverse standard error
rdata[,"precision"] <- precision
str(rdata)
nlevels(rdata$species)    # Check number of species
nlevels(rdata$study_code) # Check number of studies
#### Import Tree #############
tree1 <- read.nexus(here("Phylogeny", "all_rep_excHUM251_tree.nex"))
tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
tree <- ape::multi2di(tree_grafen, random = TRUE)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
# use a randomization approach to deal with polytomies.
# Could this this approach or another detailed here: https://search.r-project.org/CRAN/refmans/RRphylo/html/fix.poly.html
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
minq <- quantile(new_data$es, 0.025)
meta_treat_sex <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_sex.rds"))
meta_treat_sex_nointer <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_sex_nointer.rds"))
new_data <- readRDS(here("Output", "Output data", "data_rep_sex.rds"))
meta_treat_ls <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_ls.rds"))
meta_treat_ls_nointer <- readRDS(here("Output", "models", "reproduction", "meta_treat_rep_ls_nointer.rds"))
ls_data <- readRDS(here("Output", "Output data", "data_rep_ls.rds"))
minq <- quantile(new_data$es, 0.025)
maxq <- quantile(new_data$es, 0.975)
sdata <- subset(new_data, es > minq & es < maxq)
saveRDS(sdata, here("Output", "Output data", "reproduction", "sensitivity_data_rep_sex.rds"))
## Treatment temperature as a quadratic effect (sesnsitivity analysis)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run quadratic model
meta_sa_sex_nointer <- rma.mv(es, VCV_shared_sa,  mod= ~ -1 + poly(c_treattemp, degree=2, raw=TRUE) * Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
saveRDS(meta_sa_sex_nointer, here("Output", "models", "reproduction", "meta_sa_rep_sex.rds"))
summary(meta_sa_sex_nointer)
saveRDS(meta_sa_sex_nointer, here("Output", "models", "reproduction", "meta_sa_rep_sex.rds"))
saveRDS(meta_sa_sex_nointer, here("Output", "models", "reproduction", "meta_sa_rep_sex.rds"))
install.packages(quarto)
install.packages("quarto")
#| echo: false
#| warning: false
#| include: false
#| eval: true
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
install.packages("pacman")
#| echo: false
#| warning: false
#| include: false
#| eval: true
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
install.packages("flextable")
library9quarto
library(quarto)
#| echo: false
#| warning: false
#| include: false
#| eval: true
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
# source functions
source(here("R", "func.R"))
options(digits = 2)
version
