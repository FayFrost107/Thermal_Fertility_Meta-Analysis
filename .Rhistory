geary <- read.csv("Data/Gearys_test_data.csv")
setwd("~/GitHub/Thermal_Fertility_Meta-Analysis")
geary <- read.csv("Data/Gearys_test_data.csv")
effectdata <- read.csv("Data/Survival project all pairwise.csv")
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
match(geary$Paper.code, effectdata$Paper.code)
is.na(match(geary$Paper.code, effectdata$Paper.code))
table(is.na(match(geary$Paper.code, effectdata$Paper.code)))
which(is.na(match(geary$Paper.code, effectdata$Paper.code)))
effectdata4Paper.code[which(is.na(match(geary$Paper.code, effectdata$Paper.code))),]
effectdata$Paper.code[which(is.na(match(geary$Paper.code, effectdata$Paper.code))),]
effectdata$Paper.code[which(is.na(match(geary$Paper.code, effectdata$Paper.code)))]
View(geary)
View(effectdata)
table(is.na(match(effectdata$Paper.code, geary$Paper.code)))
effectdata$Paper.code[which(is.na(match(effectdata$Paper.code, geary$Paper.code)))]
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
i2_ml(meta_trait_treat2)
library(metafor)
library(ggplot2)
library(ape)
library(rotl)
library(multcomp)
library(dplyr)
library(tidyr)
# To install the orchaRd package:
#install.packages("pacman")
#pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, emmeans)
#devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
library(ggtree)
library(clubSandwich)
library(rmarkdown)
i2_ml(meta_trait_treat2)
summary(meta_trait_treat2)
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
i2_ml(meta_trait_treat3)
meta_treat_ls
meta_treat_sex
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
meta_treat_sex
meta_treat_ls
meta_treat_ls <- rma.mv(es, VCV_shared_life,  mod= ~poly(c_treattemp, degree=2, raw=TRUE)*Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= ls_data, method= "REML")
summary(meta_treat_ls)
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
##############################
new_es <- read.csv("Survival project all pairwise.es.csv")# << from old folders
setwd("C:/Users/ff242/Desktop/Liverpool PDRA/Survival project/Survival Project Data")
##############################
new_es <- read.csv("Survival project all pairwise.es.csv")# << from old folders
setwd("C:/Users/ff242/Documents/GitHub/Thermal_Fertility_Meta-Analysis")
current_es <- read.csv("Data/Survival project all pairwise.es.csv") # << from github
current_es$trial.code <- paste(current_es$Effect.size.code, current_es$treattemp, sep="_")
new_es$trial.code <- paste(new_es$Effect.size.code, new_es$treattemp, sep="_")
not_in_current <- setdiff(new_es$trial.code, current_es$trial.code)
not_in_new <- setdiff(current_es$trial.code, new_es$trial.code)
unique(not_in_current)
View(current_es)
View(new_es)
sort(unique(not_in_current))
sort(unique(not_in_current))
setwd("C:/Users/ff242/Desktop/Liverpool PDRA/Survival project/Survival Project Data")
library(metafor)
warmdata <- read.csv("Survival project effect size reftemp FF warm.csv")
# Create a list of column names for each set of columns
column_sets <- list(warmdata[c("Temp1", "Mean1", "SD1", "N1", "ani_1")],
warmdata[c("Temp2", "Mean2", "SD2", "N2", "ani_2")],
warmdata[c("Temp3", "Mean3", "SD3", "N3", "ani_3")],
warmdata[c("Temp4", "Mean4", "SD4", "N4", "ani_4")],
warmdata[c("Temp5", "Mean5", "SD5", "N5", "ani_5")],
warmdata[c("Temp6", "Mean6", "SD6", "N6", "ani_6")],
warmdata[c("Temp7", "Mean7", "SD7", "N7", "ani_7")],
warmdata[c("Temp8", "Mean8", "SD8", "N8", "ani_8")],
warmdata[c("Temp9", "Mean9", "SD9", "N9", "ani_9")])
### make sure escalc uses number of animals not number of
#replicates when i've added these to spreadhseet
ref_temp <- warmdata$ref_temp
ref_mean <- warmdata$ref_mean
ref_sd <- warmdata$ref_sd
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
#calculate_smd_old <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
#  if (is.na(temp2)) {
#    smd <- NA  # Initialize as NA (numeric)
#    smd_v <- NA
#  } else if (rtemp1 > temp2) {
#    smd <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rn1, m2i=mean2, sd2i=sd2, n2i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rani1, m2i=mean2, sd2i=sd2, n2i=ani2)[2]
#  } else if (rtemp1 < temp2) {
#    smd <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
#  } else {
#    smd <- 0
#    smd_v <- 0# rtemp1 equals temp2, so smd is set to 0
#  }
#  Smd <- cbind(smd, smd_v, rtemp1-temp2, rtemp1, temp2)
#  return(Smd)
#}
### calculate pairwise effect sizes for each treatment compared with ref temp
calculate_smd <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
smd <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
smd_v <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2)
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Mean1[i], column_sets[[1]]$SD1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Mean2[i], column_sets[[2]]$SD2[i], column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Mean3[i], column_sets[[3]]$SD3[i], column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Mean4[i], column_sets[[4]]$SD4[i], column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Mean5[i], column_sets[[5]]$SD5[i], column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Mean6[i], column_sets[[6]]$SD6[i], column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Mean7[i], column_sets[[7]]$SD7[i], column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Mean8[i], column_sets[[8]]$SD8[i], column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Mean9[i], column_sets[[9]]$SD9[i], column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "diff", "reftemp", "treattemp",
"es.2", "v.2", "diff", "reftemp", "treattemp",
"es.3", "v.3", "diff", "reftemp", "treattemp",
"es.4", "v.4", "diff", "reftemp", "treattemp",
"es.5", "v.5", "diff", "reftemp", "treattemp",
"es.6", "v.6", "diff", "reftemp", "treattemp",
"es.7", "v.7", "diff", "reftemp", "treattemp",
"es.8", "v.8", "diff", "reftemp", "treattemp",
"es.9", "v.9", "diff", "reftemp", "treattemp")
esdata <- rbind(esdata, row)
}
### creating error when N=1 because of SMD formula. dont use for now.
esdata <- as.data.frame(esdata)
#(pairwise.es, "pairwise.es.csv")
pairwise.test <- esdata
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp")
test.1 <- cbind(studydat, pairwise.test[,1:5])
test.2 <- cbind(studydat, pairwise.test[,6:10])
test.3 <- cbind(studydat, pairwise.test[,11:15])
test.4 <- cbind(studydat, pairwise.test[,16:20])
test.5 <- cbind(studydat, pairwise.test[,21:25])
test.6 <- cbind(studydat, pairwise.test[,26:30])
test.7 <- cbind(studydat, pairwise.test[,31:35])
test.8 <- cbind(studydat, pairwise.test[,36:40])
test.9 <- cbind(studydat, pairwise.test[,41:45])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
cleaned_df <- total.test[!is.na(total.test$es),]
#write.csv(cleaned_df, "pairwise.es.csv")
write.csv(cleaned_df, "pairwise.es.csv")
warmdata <- read.csv("Survival project effect size props reftemp FF warm.csv")
# Create a list of column names for each set of columns
column_sets <- list(warmdata[c("Temp1", "Prop1", "N1", "ani_1")],
warmdata[c("Temp2", "Prop2", "N2", "ani_2")],
warmdata[c("Temp3", "Prop3", "N3", "ani_3")],
warmdata[c("Temp4", "Prop4", "N4", "ani_4")],
warmdata[c("Temp5", "Prop5", "N5", "ani_5")],
warmdata[c("Temp6", "Prop6", "N6", "ani_6")],
warmdata[c("Temp7", "Prop7", "N7", "ani_7")],
warmdata[c("Temp8", "Prop8", "N8", "ani_8")],
warmdata[c("Temp9", "Prop9", "N9", "ani_9")])
### make sure escalc uses number of animals not number of
#replicates when i've added these to spreadhseet
ref_temp <- warmdata$ref_temp
ref_prop <- warmdata$ref_prop
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
calculate_smd <- function(rtemp1, rprop1, rani1, rn1, temp2, prop2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
### x = (group1_cond1, grp1_cond2, grp2_cond1, grp2_cond2)
## group1_cond1 = ani_1 * prop
## group1_cond2 = ani_1 * (1-prop)
data <- c(rani1*rprop1, rani1 * (1-rprop1), ani2*prop2, ani2 * (1-prop2))
x <- matrix(data, nrow=2, ncol=2, byrow=T)
score <- chisq.test(x)
chi <- score$statistic
d = sqrt((chi*(rani1+ani2))/(rani1 * ani2))
if(rprop1 >= prop2){
smd <- -d
} else {
smd <- d
}
smd_v <- ((rani1+ani2)/(rani1*ani2))+((d^2)/(2*(rani1+ani2)))
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2)
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Prop1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Prop2[i],  column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Prop3[i],  column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Prop4[i],  column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Prop5[i],  column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Prop6[i],  column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Prop7[i],  column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Prop8[i],  column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Prop9[i],  column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "diff", "reftemp", "treattemp",
"es.2", "v.2", "diff", "reftemp", "treattemp",
"es.3", "v.3", "diff", "reftemp", "treattemp",
"es.4", "v.4", "diff", "reftemp", "treattemp",
"es.5", "v.5", "diff", "reftemp", "treattemp",
"es.6", "v.6", "diff", "reftemp", "treattemp",
"es.7", "v.7", "diff", "reftemp", "treattemp",
"es.8", "v.8", "diff", "reftemp", "treattemp",
"es.9", "v.9", "diff", "reftemp", "treattemp")
esdata <- rbind(esdata, row)
}
esdata <- as.data.frame(esdata)
pairwise.test <- esdata
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp")
test.1 <- cbind(studydat, pairwise.test[,1:5])
test.2 <- cbind(studydat, pairwise.test[,6:10])
test.3 <- cbind(studydat, pairwise.test[,11:15])
test.4 <- cbind(studydat, pairwise.test[,16:20])
test.5 <- cbind(studydat, pairwise.test[,21:25])
test.6 <- cbind(studydat, pairwise.test[,26:30])
test.7 <- cbind(studydat, pairwise.test[,31:35])
test.8 <- cbind(studydat, pairwise.test[,36:40])
test.9 <- cbind(studydat, pairwise.test[,41:45])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
cleaned_df <- total.test[!is.na(total.test$es),]
write.csv(cleaned_df, "pairwiseprops.es.csv")
##############################
new_es <- read.csv("Survival project all pairwise.es.csv")# << from old folders
setwd("C:/Users/ff242/Documents/GitHub/Thermal_Fertility_Meta-Analysis")
current_es <- read.csv("Data/Survival project all pairwise.es.csv") # << from github
setwd("C:/Users/ff242/Desktop/Liverpool PDRA/Survival project/Survival Project Data")
##############################
new_es <- read.csv("Survival project all pairwise.es.csv")# << from old folders
setwd("C:/Users/ff242/Documents/GitHub/Thermal_Fertility_Meta-Analysis")
current_es$trial.code <- paste(current_es$Effect.size.code, current_es$treattemp, sep="_")
new_es$trial.code <- paste(new_es$Effect.size.code, new_es$treattemp, sep="_")
not_in_current <- setdiff(new_es$trial.code, current_es$trial.code)
not_in_new <- setdiff(current_es$trial.code, new_es$trial.code)
not_in_current
not_in_new
sort(not_in_current)
sort(not_in_new)
View(current_es)
View(new_es)
setwd("C:/Users/ff242/Desktop/Liverpool PDRA/Survival project/Data Wrangling")
library(metafor)
warmdata <- read.csv("Survival project effect size reftemp FF warm.csv")
setwd("C:/Users/ff242/Desktop/Liverpool PDRA/Survival project/Data Wrangling")
library(metafor)
warmdata <- read.csv("Survival project effect size reftemp FF warm.csv")
setwd("C:/Users/ff242/Desktop/Liverpool PDRA/Survival project/Survival Project Data")
ref_ani <- warmdata$ref_ani
library(metafor)
warmdata <- read.csv("Survival project effect size reftemp FF warm.csv")
# Create a list of column names for each set of columns
column_sets <- list(warmdata[c("Temp1", "Mean1", "SD1", "N1", "ani_1")],
warmdata[c("Temp2", "Mean2", "SD2", "N2", "ani_2")],
warmdata[c("Temp3", "Mean3", "SD3", "N3", "ani_3")],
warmdata[c("Temp4", "Mean4", "SD4", "N4", "ani_4")],
warmdata[c("Temp5", "Mean5", "SD5", "N5", "ani_5")],
warmdata[c("Temp6", "Mean6", "SD6", "N6", "ani_6")],
warmdata[c("Temp7", "Mean7", "SD7", "N7", "ani_7")],
warmdata[c("Temp8", "Mean8", "SD8", "N8", "ani_8")],
warmdata[c("Temp9", "Mean9", "SD9", "N9", "ani_9")])
### make sure escalc uses number of animals not number of
#replicates when i've added these to spreadhseet
ref_temp <- warmdata$ref_temp
ref_mean <- warmdata$ref_mean
ref_sd <- warmdata$ref_sd
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
#calculate_smd_old <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
#  if (is.na(temp2)) {
#    smd <- NA  # Initialize as NA (numeric)
#    smd_v <- NA
#  } else if (rtemp1 > temp2) {
#    smd <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rn1, m2i=mean2, sd2i=sd2, n2i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rani1, m2i=mean2, sd2i=sd2, n2i=ani2)[2]
#  } else if (rtemp1 < temp2) {
#    smd <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
#  } else {
#    smd <- 0
#    smd_v <- 0# rtemp1 equals temp2, so smd is set to 0
#  }
#  Smd <- cbind(smd, smd_v, rtemp1-temp2, rtemp1, temp2)
#  return(Smd)
#}
### calculate pairwise effect sizes for each treatment compared with ref temp
calculate_smd <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
smd <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
smd_v <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2)
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Mean1[i], column_sets[[1]]$SD1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Mean2[i], column_sets[[2]]$SD2[i], column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Mean3[i], column_sets[[3]]$SD3[i], column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Mean4[i], column_sets[[4]]$SD4[i], column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Mean5[i], column_sets[[5]]$SD5[i], column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Mean6[i], column_sets[[6]]$SD6[i], column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Mean7[i], column_sets[[7]]$SD7[i], column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Mean8[i], column_sets[[8]]$SD8[i], column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Mean9[i], column_sets[[9]]$SD9[i], column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "diff", "reftemp", "treattemp",
"es.2", "v.2", "diff", "reftemp", "treattemp",
"es.3", "v.3", "diff", "reftemp", "treattemp",
"es.4", "v.4", "diff", "reftemp", "treattemp",
"es.5", "v.5", "diff", "reftemp", "treattemp",
"es.6", "v.6", "diff", "reftemp", "treattemp",
"es.7", "v.7", "diff", "reftemp", "treattemp",
"es.8", "v.8", "diff", "reftemp", "treattemp",
"es.9", "v.9", "diff", "reftemp", "treattemp")
esdata <- rbind(esdata, row)
}
### creating error when N=1 because of SMD formula. dont use for now.
esdata <- as.data.frame(esdata)
#(pairwise.es, "pairwise.es.csv")
pairwise.test <- esdata
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp")
test.1 <- cbind(studydat, pairwise.test[,1:5])
test.2 <- cbind(studydat, pairwise.test[,6:10])
test.3 <- cbind(studydat, pairwise.test[,11:15])
test.4 <- cbind(studydat, pairwise.test[,16:20])
test.5 <- cbind(studydat, pairwise.test[,21:25])
test.6 <- cbind(studydat, pairwise.test[,26:30])
test.7 <- cbind(studydat, pairwise.test[,31:35])
test.8 <- cbind(studydat, pairwise.test[,36:40])
test.9 <- cbind(studydat, pairwise.test[,41:45])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
cleaned_df <- total.test[!is.na(total.test$es),]
write.csv(cleaned_df, "pairwise.es.csv")
warmdata <- read.csv("Survival project effect size props reftemp FF warm.csv")
# Create a list of column names for each set of columns
column_sets <- list(warmdata[c("Temp1", "Prop1", "N1", "ani_1")],
warmdata[c("Temp2", "Prop2", "N2", "ani_2")],
warmdata[c("Temp3", "Prop3", "N3", "ani_3")],
warmdata[c("Temp4", "Prop4", "N4", "ani_4")],
warmdata[c("Temp5", "Prop5", "N5", "ani_5")],
warmdata[c("Temp6", "Prop6", "N6", "ani_6")],
warmdata[c("Temp7", "Prop7", "N7", "ani_7")],
warmdata[c("Temp8", "Prop8", "N8", "ani_8")],
warmdata[c("Temp9", "Prop9", "N9", "ani_9")])
### make sure escalc uses number of animals not number of
#replicates when i've added these to spreadhseet
ref_temp <- warmdata$ref_temp
ref_prop <- warmdata$ref_prop
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
calculate_smd <- function(rtemp1, rprop1, rani1, rn1, temp2, prop2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
### x = (group1_cond1, grp1_cond2, grp2_cond1, grp2_cond2)
## group1_cond1 = ani_1 * prop
## group1_cond2 = ani_1 * (1-prop)
data <- c(rani1*rprop1, rani1 * (1-rprop1), ani2*prop2, ani2 * (1-prop2))
x <- matrix(data, nrow=2, ncol=2, byrow=T)
score <- chisq.test(x)
chi <- score$statistic
d = sqrt((chi*(rani1+ani2))/(rani1 * ani2))
if(rprop1 >= prop2){
smd <- -d
} else {
smd <- d
}
smd_v <- ((rani1+ani2)/(rani1*ani2))+((d^2)/(2*(rani1+ani2)))
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2)
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Prop1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Prop2[i],  column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Prop3[i],  column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Prop4[i],  column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Prop5[i],  column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Prop6[i],  column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Prop7[i],  column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Prop8[i],  column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_prop[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Prop9[i],  column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "diff", "reftemp", "treattemp",
"es.2", "v.2", "diff", "reftemp", "treattemp",
"es.3", "v.3", "diff", "reftemp", "treattemp",
"es.4", "v.4", "diff", "reftemp", "treattemp",
"es.5", "v.5", "diff", "reftemp", "treattemp",
"es.6", "v.6", "diff", "reftemp", "treattemp",
"es.7", "v.7", "diff", "reftemp", "treattemp",
"es.8", "v.8", "diff", "reftemp", "treattemp",
"es.9", "v.9", "diff", "reftemp", "treattemp")
esdata <- rbind(esdata, row)
}
esdata <- as.data.frame(esdata)
pairwise.test <- esdata
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp",
"es", "v", "diff", "reftemp", "treattemp")
test.1 <- cbind(studydat, pairwise.test[,1:5])
test.2 <- cbind(studydat, pairwise.test[,6:10])
test.3 <- cbind(studydat, pairwise.test[,11:15])
test.4 <- cbind(studydat, pairwise.test[,16:20])
test.5 <- cbind(studydat, pairwise.test[,21:25])
test.6 <- cbind(studydat, pairwise.test[,26:30])
test.7 <- cbind(studydat, pairwise.test[,31:35])
test.8 <- cbind(studydat, pairwise.test[,36:40])
test.9 <- cbind(studydat, pairwise.test[,41:45])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
cleaned_df <- total.test[!is.na(total.test$es),]
write.csv(cleaned_df, "pairwise.props.es.csv")
##############################
new_es <- read.csv("Survival project all pairwise.es.csv")# << from old folders
setwd("C:/Users/ff242/Documents/GitHub/Thermal_Fertility_Meta-Analysis")
current_es <- read.csv("Data/Survival project all pairwise.es.csv") # << from github
current_es$trial.code <- paste(current_es$Effect.size.code, current_es$treattemp, sep="_")
new_es$trial.code <- paste(new_es$Effect.size.code, new_es$treattemp, sep="_")
not_in_current <- setdiff(new_es$trial.code, current_es$trial.code)
not_in_new <- setdiff(current_es$trial.code, new_es$trial.code)
