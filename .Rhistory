row <- cbind(row, calculate_g(column_sets[[8]]$Temp8[i], column_sets[[8]]$Mean8[i], column_sets[[8]]$SD8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_g(column_sets[[9]]$Temp9[i], column_sets[[9]]$Mean9[i], column_sets[[9]]$SD9[i], column_sets[[9]]$N9[i]))
gdata <- rbind(gdata, row)
}
gdata <- as.data.frame(gdata)
new_column <- apply(gdata, 1, function(row) any(!is.na(row) & row < 3))
gearys_test <- cbind(warmdata$Paper.code, gdata, new_column)
View(gearys_test)
View(pairwise.test)
View(total.test)
View(gearys_test)
setwd("~/GitHub/Thermal_Fertility_Meta-Analysis")
mv_mlma_4 <- readRDS(here("output", "models", "mv_mlma_4.rds"))
#install.packages("pacman")
pacman::p_load(tidyverse, here, metafor, ape, phytools)
mv_mlma_4 <- readRDS(here("output", "models", "mv_mlma_4.rds"))
summary(mv_mlma_4)
mv_mlma_3 <- readRDS(here("output", "models", "mv_mlma_3.rds"))
summary(mv_mlma_3)
mv_mlma_1 <- readRDS(here("output", "models", "mv_mlma_1.rds"))
summary(mv_mlma_1)
mv_mlma_2 <- readRDS(here("output", "models", "mv_mlma_2.rds"))
summary(mv_mlma_2)
mv_mlma_3 <- readRDS(here("output", "models", "mv_mlma_3.rds"))
summary(mv_mlma_3)
data_long <- data %>% pivot_longer(cols = c(es_reproduction, es_longevity, v_reproduction, v_longevity), names_to = "outcome", values_to = "es") %>% data.frame()
## Load in the finalised data
data <- read.csv(here("data", "cleaned_unique_combo.csv"))
nlevels(factor(data$Paper.code))
mv_mlma_3 <- rma.mv(es ~ -1 + outcome + outcome:scale(treattemp, scale = FALSE), V = V,    # This should compare whether the linear effect of temperature differs between the two outcomes when we allow for intercept, but without intercept  it will test whether there is a linear effect of temperature on each outcome separately and estimate that effect
random = list(~outcome - 1 | trial,        # This would be equivalent to an obs level random effect bc trial is unique to each two effects
~outcome - 1 | Paper.code),  # This should estimate a study level random effect for each outcome.
struc = "UN", data = data_long_final, test = "t", dfs = "contain")
data_long <- data %>% pivot_longer(cols = c(es_reproduction, es_longevity, v_reproduction, v_longevity), names_to = "outcome", values_to = "es") %>% data.frame()
# Not quite where we need it, so lets filter out v and then cbind together
data_long_es <- data_long %>% filter(outcome %in% c("es_reproduction", "es_longevity"))
data_long_v <- data_long %>% filter(outcome %in% c("v_reproduction", "v_longevity"))
# All information should now be ordered correctly and the data frames the same dimensions. We can check
dim(data_long_es)
dim(data_long_v)
# Now, bind these together
data_long_final <- cbind(data_long_es, v = data_long_v$es)
# Create unique ID for clustered effects
data_long_final$trial <- with(data_long_final, interaction(Experiment.code, diff))
# Now, let's check that this data is set up correctly. If we group by Experiment.code, diff and outcome then we should have a maximum of 1 effect size for each study/diff in each outcome category
check <- data_long_final %>% group_by(trial, outcome) %>% summarise(n=n()) %>% filter(n !=1)
# The Experiment code identifiers that are relevant are:
unique(check$trial) # 0
V <- metafor::vcalc(vi=v, cluster = trial, type = outcome, data = data_long_final, rho = 0.5, nearpd = TRUE)
mv_mlma_3 <- rma.mv(es ~ -1 + outcome + outcome:scale(treattemp, scale = FALSE), V = V,    # This should compare whether the linear effect of temperature differs between the two outcomes when we allow for intercept, but without intercept  it will test whether there is a linear effect of temperature on each outcome separately and estimate that effect
random = list(~outcome - 1 | trial,        # This would be equivalent to an obs level random effect bc trial is unique to each two effects
~outcome - 1 | Paper.code),  # This should estimate a study level random effect for each outcome.
struc = "UN", data = data_long_final, test = "t", dfs = "contain")
saveRDS(mv_mlma_3, here("output", "models", "mv_mlma_3.rds"))
View(data)
data[,36]
colnames(data[,1:36])
data <- cbind(data[,1:36], data$treattemp-25, data[,37:41])
View(data)
colnames(data[,37])
colnames(data) <- c(colnames(data[,1:36]), "scale.temp", colnames(data[,38:81]))
colnames(data) <- c(colnames(data[,1:36]), "scale.temp", colnames(data[,38:42]))
View(data)
View(data)
warmdata <- read.csv("Survival project effect size reftemp FF warm.csv")
warmdata <- read.csv("EDA/Survival project effect size reftemp FF warm.csv")
# Create a list of column names for each treatment
column_sets <- list(warmdata[c("Temp1", "Mean1", "SD1", "N1", "ani_1")],
warmdata[c("Temp2", "Mean2", "SD2", "N2", "ani_2")],
warmdata[c("Temp3", "Mean3", "SD3", "N3", "ani_3")],
warmdata[c("Temp4", "Mean4", "SD4", "N4", "ani_4")],
warmdata[c("Temp5", "Mean5", "SD5", "N5", "ani_5")],
warmdata[c("Temp6", "Mean6", "SD6", "N6", "ani_6")],
warmdata[c("Temp7", "Mean7", "SD7", "N7", "ani_7")],
warmdata[c("Temp8", "Mean8", "SD8", "N8", "ani_8")],
warmdata[c("Temp9", "Mean9", "SD9", "N9", "ani_9")])
calculate_g <- function(temp, mean, sd, n){
if (is.na(temp)){
g <- NA  # Initialize as NA (numeric)
} else {
g <- (mean*sqrt(n))/sd
}
return(g)
}
############################### think i can combine this into the piarwise calc so I can easily remove specific es.
ref_temp <- warmdata$ref_temp
ref_mean <- warmdata$ref_mean
ref_sd <- warmdata$ref_sd
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
calculate_smd <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
gtest <- NA
} else if (rtemp1 != temp2) {
smd <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
smd_v <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2, calculate_g(temp2, mean2, sd2, n2))
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Mean1[i], column_sets[[1]]$SD1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Mean2[i], column_sets[[2]]$SD2[i], column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Mean3[i], column_sets[[3]]$SD3[i], column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Mean4[i], column_sets[[4]]$SD4[i], column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Mean5[i], column_sets[[5]]$SD5[i], column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Mean6[i], column_sets[[6]]$SD6[i], column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Mean7[i], column_sets[[7]]$SD7[i], column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Mean8[i], column_sets[[8]]$SD8[i], column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Mean9[i], column_sets[[9]]$SD9[i], column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "??", "reftemp", "treattemp", "gtest",
"es.2", "v.2", "??", "reftemp", "treattemp", "gtest",
"es.3", "v.3", "??", "reftemp", "treattemp", "gtest",
"es.4", "v.4", "??", "reftemp", "treattemp", "gtest",
"es.5", "v.5", "??", "reftemp", "treattemp", "gtest",
"es.6", "v.6", "??", "reftemp", "treattemp", "gtest",
"es.7", "v.7", "??", "reftemp", "treattemp", "gtest",
"es.8", "v.8", "??", "reftemp", "treattemp", "gtest",
"es.9", "v.9", "??", "reftemp", "treattemp", "gtest")
esdata <- rbind(esdata, row)
}
pairwise.test <- esdata
View(pairwise.test)
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest",
"es", "v", "diff", "reftemp", "treattemp", "gtest")
View(pairwise.test)
test.1 <- cbind(studydat, pairwise.test[,1:6])
test.2 <- cbind(studydat, pairwise.test[,7:12])
test.3 <- cbind(studydat, pairwise.test[,13:18])
test.4 <- cbind(studydat, pairwise.test[,19:24])
test.5 <- cbind(studydat, pairwise.test[,25:30])
test.6 <- cbind(studydat, pairwise.test[,31:36])
test.7 <- cbind(studydat, pairwise.test[,37:42])
test.8 <- cbind(studydat, pairwise.test[,43:48])
test.9 <- cbind(studydat, pairwise.test[,49:54])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
View(total.test)
cleaned_df <- total.test[!is.na(total.test$es),]
View(cleaned_df)
## Use apply to count how many values in total are < 3 i.e. how many effect sizes we'd end up removing
result <- apply(cleaned_df, 2, function(col) sum(!is.na(col) & col < 3))
# Sum the results to get the total count = 256 .... worth removing.
total_count <- sum(result)
##  Count how many values in total are < 3 i.e. how many effect sizes we'd end up removing
which(cleaned_df$gtest < 3)
##  Count how many values in total are < 3 i.e. how many effect sizes we'd end up removing
count(which(cleaned_df$gtest < 3))
##  Count how many values in total are < 3 i.e. how many effect sizes we'd end up removing
count(cleaned_df$gtest < 3)
##  Count how many values in total are < 3 i.e. how many effect sizes we'd end up removing
count(is(cleaned_df$gtest < 3))
##  Count how many values in total are < 3 i.e. how many effect sizes we'd end up removing
is(cleaned_df$gtest < 3)
##  Count how many values in total are < 3 i.e. how many effect sizes we'd end up removing
table(cleaned_df$gtest < 3)
?escalxc
?escalc
library(metafor)
?escalc
library(metafor)
library(ggplot2)
library(ape)
library(rotl)
library(multcomp)
library(dplyr)
# To install the orchaRd package:
#install.packages("pacman")
#pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, emmeans)
#devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
library(ggtree)
library(clubSandwich)
library(rmarkdown)
##########################################################################################################
#--------------#
# 1. Setup     #
#--------------#
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
repdata_warm <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Warm" )
repdata_cool <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Cool" )
allrep <- rbind(repdata_warm, repdata_cool)
### select data for analysis
rdata <- allrep
rdata <- subset(rdata, Paper.code != "HUM251")
### center the data around 25C
data <- data %>% mutate(c_treattemp = treattemp - 25)
View(allrep)
library(tidyr)
### center the data around 25C
data <- data %>% mutate(c_treattemp = treattemp - 25)
?mutate
### center the data around 25C
rdata <- rdata %>% mutate(c_treattemp = treattemp - 25)
View(allrep)
View(rdata)
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
### center the data around 25C
rdata <- rdata %>% mutate(c_treattemp = treattemp - 25)
View(rdata)
# treat temp centered
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treattemp)
# treat temp^2 centered
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treat2)
# re-run quadratic model
meta_sa_treat2 <- rma.mv(es, VCV_shared_sa,  mod= ~ poly(c_treattemp, degree=2, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
View(rdata)
View(allrep)
### center the data around 25C
rdata <- rdata %>% mutate(c_treattemp = treattemp - 25)
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
### center the data around 25C
rdata <- rdata %>% mutate(c_treattemp = treattemp - 25)
# treat temp centered
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
# treat temp^2 centered
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treattemp)
summary(meta_trait_treat2)
# re-run quadratic model
meta_sa_treat2 <- rma.mv(es, VCV_shared_sa,  mod= ~ poly(c_treattemp, degree=2, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
# re-run quadratic model
meta_sa_treat2 <- rma.mv(es, VCV_shared_sa,  mod= ~poly(c_treattemp, degree=2, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
minq <- quantile(rdata$es, 0.025)
maxq <- quantile(rdata$es, 0.975)
sdata <- subset(rdata, es > minq & es < maxq)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run quadratic model
meta_sa_treat2 <- rma.mv(es, VCV_shared_sa,  mod= ~poly(c_treattemp, degree=2, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
summary(meta_sa_treat2)
gearydata <- read.csv("Data/Gearys_test_data.csv")
# view the first fews rows of selected columns
gearydata  %>% dplyr::select(Experiment.code, Trait.category, reftemp, treattemp, es, v, gtest)  %>%  head(., 30)
# How many effect sozes have a standardised mean < 3 ?
outliers_lon <-  subset(gearydata, Trait.category == "Longevity" & gtest < 3) #82
outliers_sur <-  subset(gearydata, Trait.category == "Survival" & gtest < 3) # 171
outliers_rep <-  subset(gearydata, Trait.category == "Reproduction" & gtest < 3) # 3
s.gearydata <- gearydata %>% subset(gtest > 3)
# Resubset reproduction dat
gdata_rep_warm <- subset(s.gearydata, Trait.category == "Reproduction" & warm.cool == "Warm" )
gdata_rep_cool <- subset(s.gearydata, Trait.category == "Reproduction" & warm.cool == "Cool" )
all_gdata <- rbind(gdata_rep_warm, gdata_rep_cool)
all_gdata <- all_gdata %>% mutate(c_treattemp = treattemp - 25)
### Create random factors into data frame
all_gdata$obs <- factor(c(1:nrow(all_gdata)))                # Unique observation code
all_gdata$study_code <- factor(all_gdata$Paper.code)         # Model requires column names study_code
all_gdata$Species.phylo <- factor(all_gdata$Species.latin)   # Species names for phylo matrix
all_gdata$species <- factor(all_gdata$Species.latin)         # Another species column for random factor
precision <- sqrt(1/all_gdata$v)                         # inverse standard error
all_gdata[,"precision"] <- precision
# recalculate v matrix
all_gdata$shared_control <- factor(all_gdata$Effect.size.code)
VCV_shared_ga <- impute_covariance_matrix(vi=all_gdata$v, cluster = all_gdata$shared_control, r=0.5)
meta_ga_treat2 <- rma.mv(es, VCV_shared_ga,  mod= ~ poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code, ~1|obs), test = "t", dfs = "contain", data= all_gdata, method= "REML")
render("Rmarkdown/meta_analysis_reproduction.rmd")
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
rdata <- rdata %>% mutate(c_treattemp = treattemp - 25)
# treat temp
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
# treat temp^2
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
# treat temp^3
meta_trait_treat3 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
minq <- quantile(rdata$es, 0.025)
maxq <- quantile(rdata$es, 0.975)
sdata <- subset(rdata, es > minq & es < maxq)
## Treatment temperature as a cubic effect (sesnsitivity analysis)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run cubic model
meta_sa_treat3 <- rma.mv(es, VCV_shared_sa,  mod= ~ poly(c_treattemp, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
gearydata <- read.csv("Data/Gearys_test_data.csv")
# view the first fews rows of selected columns
gearydata  %>% dplyr::select(Experiment.code, Trait.category, reftemp, treattemp, es, v, gtest)  %>%  head(., 30)
# How many effect sozes have a standardised mean < 3 ?
outliers_lon <-  subset(gearydata, Trait.category == "Longevity" & gtest < 3) #82
outliers_sur <-  subset(gearydata, Trait.category == "Survival" & gtest < 3) # 3
outliers_rep <-  subset(gearydata, Trait.category == "Reproduction" & gtest < 3)
s.gearydata <- gearydata %>% subset(gtest > 3)
# Resubset reproduction dat
gdata_lon_warm <- subset(s.gearydata, Trait.category == "Longevity" & warm.cool == "Warm" )
gdata_lon_cool <- subset(s.gearydata, Trait.category == "Longevity" & warm.cool == "Cool" )
all_gdata <- rbind(gdata_lon_warm, gdata_lon_cool)
all_gdata <- all_gdata %>% mutate(c_treattemp = treattemp - 25)
### Create random factors into data frame
all_gdata$obs <- factor(c(1:nrow(all_gdata)))                # Unique observation code
all_gdata$study_code <- factor(all_gdata$Paper.code)         # Model requires column names study_code
all_gdata$Species.phylo <- factor(all_gdata$Species.latin)   # Species names for phylo matrix
all_gdata$species <- factor(all_gdata$Species.latin)         # Another species column for random factor
precision <- sqrt(1/all_gdata$v)                         # inverse standard error
all_gdata[,"precision"] <- precision
# recalculate v matrix
all_gdata$shared_control <- factor(all_gdata$Effect.size.code)
VCV_shared_ga <- impute_covariance_matrix(vi=all_gdata$v, cluster = all_gdata$shared_control, r=0.5)
meta_ga_treat3 <- rma.mv(es, VCV_shared_ga,  mod= ~ poly(c_treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code, ~1|obs), test = "t", dfs = "contain", data= all_gdata, method= "REML")
render("Rmarkdown/meta_analysis_longevity.Rmd")
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
table(rdata$Habitat)
table(rdata$Class)
table(rdata$Sex.exposed)
table(rdata$Fertilisation.mode)
table(rdata$Fertilisation.mode)
meta_treat_habitat <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp * Habitat, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
meta_treat_habitat <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp * Habitat, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
meta_treat_habitat <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=3, raw=TRUE)*Habitat,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
table(rdata$Habitat)
summary(meta_treat_habitat)
table(rdata$Class)
table(rdata$Habitat)
table(rdata$Sex.exposed)
table(rdata$Fertilisation.mode)
table(rdata$Agricultural.importance)
table(rdata$Lab.or.field)
table(rdata$Exposure.duration)
table(rdata$Life.stage.of.animal)
render("Rmarkdown/exploring_fixed_effects.rmd")
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
getwd()
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
list.files()
effectdata <- read.csv("./Data/Survival project all pairwise.es.csv")
effectdata <- read.csv("../Data/Survival project all pairwise.es.csv")
longdata_warm <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Warm" )
longdata_cool <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Cool" )
alllong <- rbind(longdata_warm, longdata_cool)
### select data for analysis
rdata <- alllong
rdata <- subset(rdata, Paper.code != "HUM251")
rdata <- rdata %>% mutate(c_treattemp = treattemp - 25)
########### change species names in survival data ####################################
classes <- read.csv("Data/Species_classifications.CSV") ## read in species classifications from map
render("Rmarkdown/exploring_fixed_effects.rmd")
render("Rmarkdown/exploring_fixed_effects.rmd")
render("Rmarkdown/exploring_fixed_effects.rmd")
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
table(rdata$Habitat)
table(rdata$Sex.exposed)
new_data <- rdata
new_data$Sex.exposed[which(new_data$Sex.exposed == "Male")] <- "Both"
new_data$Sex.exposed[which(new_data$Sex.exposed == "Parthenogenetic")] <- "Female"
table(rdata$Sex.exposed)
table(new_data$Sex.exposed)
new_data <- subset(newdata, Sex.exposed != "Unsure")
new_data <- subset(new_data, Sex.exposed != "Unsure")
table(new_data$Sex.exposed)
VCV_shared_sex <- impute_covariance_matrix(vi=new_data$v, cluster = new_data$shared_control, r=0.5)
library(metafor)
library(ggplot2)
library(ape)
library(rotl)
library(multcomp)
library(dplyr)
library(ggtree)
# To install the orchaRd package:
#install.packages("pacman")
#pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, emmeans)
#devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
library(clubSandwich)
library(rmarkdown)
VCV_shared_sex <- impute_covariance_matrix(vi=new_data$v, cluster = new_data$shared_control, r=0.5)
meta_treat_habitat <- rma.mv(es, VCV_shared_sex,  mod= ~poly(c_treattemp * Sex.exposed, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
meta_treat_habitat <- rma.mv(es, VCV_shared_sex,  mod= ~poly(c_treattemp, degree=3, raw=TRUE)*Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
meta_treat_habitat <- meta_treat_sex
meta_treat_sex <- meta_treat_sex
meta_treat_sex <- meta_treat_habitat
rm(meta_treat_habitat)
summary(meta_treat_sex)
meta_treat_sex_u <- rma.mv(es, VCV_shared_sex,  mod= c_treattemp*Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
meta_treat_sex_u <- rma.mv(es, VCV_shared_sex,  mod=~c_treattemp*Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
summary(meta-treat_sex_u)
summary(meta_treat_sex_u)
ls_data <- rdata
table(ls_data$Life.stage.of.animal)
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Juvenile")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Larvae")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Mix")] <- "Immature"
table(ls_data$Life.stage.of.animal)
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Pupae")] <- "Immature"
table(ls_data$Life.stage.of.animal)
ls_data <- subset(ls_data, Life.stage.of.animal != "Egg")
ls_data <- subset(ls_data, Life.stage.of.animal != "Embryo")
table(ls_data$Life.stage.of.animal)
VCV_shared_life <- impute_covariance_matrix(vi=ls_data$v, cluster = ls_data$shared_control, r=0.5)
VCV_shared_life <- impute_covariance_matrix(vi=ls_data$v, cluster = ls_data$shared_control, r=0.5)
meta_treat_ls <- rma.mv(es, VCV_shared_life,  mod= ~poly(c_treattemp, degree=3, raw=TRUE)*Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
meta_treat_ls <- rma.mv(es, VCV_shared_life,  mod= ~poly(c_treattemp, degree=3, raw=TRUE)*Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= ls_data, method= "REML")
summary(meta_treat_ls)
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
new_data <- rdata
new_data$Sex.exposed[which(new_data$Sex.exposed == "Male")] <- "Both"
new_data$Sex.exposed[which(new_data$Sex.exposed == "Parthenogenetic")] <- "Female"
new_data <- subset(new_data, Sex.exposed != "Unsure")
VCV_shared_sex <- impute_covariance_matrix(vi=new_data$v, cluster = new_data$shared_control, r=0.5)
meta_treat_sex <- rma.mv(es, VCV_shared_sex,  mod= ~poly(c_treattemp, degree=2, raw=TRUE)*Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
summary(meta_treat_sex)
ls_data <- rdata
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Juvenile")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Larvae")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Mix")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Pupae")] <- "Immature"
ls_data <- subset(ls_data, Life.stage.of.animal != "Egg")
ls_data <- subset(ls_data, Life.stage.of.animal != "Embryo")
VCV_shared_life <- impute_covariance_matrix(vi=ls_data$v, cluster = ls_data$shared_control, r=0.5)
meta_treat_ls <- rma.mv(es, VCV_shared_life,  mod= ~poly(c_treattemp, degree=3, raw=TRUE)*Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= ls_data, method= "REML")
summary(meta_treat_ls)
table(rdata$Agricultural.importance)
### pest
pest_data <- subset(rdata, Agricultural.importance = "Pest")
### pest
pest_data <- subset(rdata, Agricultural.importance == "Pest")
VCV_shared_pest <- impute_covariance_matrix(vi=pest_data$v, cluster = pest_data$shared_control, r=0.5)
meta_pest <- rma.mv(es, VCV_shared_pest,  mod= ~poly(c_treattemp, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= pest_data, method= "REML")
summary(meta-pest)
summary(meta_pest)
meta_pest <- rma.mv(es, VCV_shared_pest,  mod= ~poly(c_treattemp, degree=2, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= pest_data, method= "REML")
summary(meta_pest)
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/reproduction_meta_analysis_output.RData")
mv_mlma_3 <- readRDS(here("output", "models", "mv_mlma_3.rds"))
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
pacman::p_load(tidyverse, here, metafor, ape, phytools, corrplot, metaAidR)
# source functions
source(here("R", "func.R"))
mv_mlma_3 <- readRDS(here("output", "models", "mv_mlma_3.rds"))
summary(mv_mlma_3)
mv_mlma_4 <- readRDS(here("output", "models", "mv_mlma_4.rds"))
summary(mv_mlma_4)
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
# First, create some new data for moderators, this will create a sequence for c_treattemp based on the min and max values.
# if we had other moderators then we would need to be sure that they are named exactly as in the model and added here. #
# Of course, we also do not need to have a full sequence, we could just pick certain values (e.g., 25, 30 or 40) and make predcitions of the mean at thos temps.
sampledata <- as.matrix(data.frame(c_treattemp = seq(min(rdata$c_treattemp), max(rdata$c_treattemp), length.out = 100)))
summary(meta_trait_treat3)
# Then make predictions using the model of interest.
preds <- data.frame(predict(meta_trait_treat3, newmods = sampledata, digits = 2, addx=TRUE))
head9sapledata
head(sampledata)
min(rdata$c_treattemp)
max(rdata$c_treattemp)
# Then make predictions using the model of interest.
preds <- data.frame(predict(meta_trait_treat3, newmods = sampledata, digits = 2, addx=TRUE))
# Then make predictions using the model of interest.
preds <- data.frame(predict(meta_trait_treattemp, newmods = sampledata, digits = 2, addx=TRUE))
summary(meta_trait_treattemp)
summary(meta_trait_treat3)
# Then make predictions using the model of interest.
preds <- data.frame(predict(meta_trait_treat3, newmods = sampledata, digits = 2, addx=TRUE))
?precit
?predict
# Step 1: Create a sequence of values for c_treattemp
new_c_treattemp <- seq(min(rdata$c_treattemp), max(rdata$c_treattemp), length = 1000)
# Step 2: Use the predict function to get predicted effect sizes
predicted_values <- predict(meta_trait_treat3, newmods = data.frame(c_treattemp = new_c_treattemp))
# Step 1: Create a sequence of values for c_treattemp
new_c_treattemp <- as.atrix9data.frame(seq(min(rdata$c_treattemp), max(rdata$c_treattemp), length = 1000)))
# Step 1: Create a sequence of values for c_treattemp
new_c_treattemp <- as.matrix(data.frame(seq(min(rdata$c_treattemp), max(rdata$c_treattemp), length = 1000)))
new_c_treattemp
head(new_c_treattemp)
# Step 1: Create a sequence of values for c_treattemp
new_c_treattemp <- as.matrix(data.frame(seq(min(rdata$c_treattemp), max(rdata$c_treattemp), length.out = 1000)))
head(new_c_treattemp)
# Step 2: Use the predict function to get predicted effect sizes
predicted_values <- predict(meta_trait_treat3, newmods = data.frame(c_treattemp = new_c_treattemp))
# Step 2: Use the predict function to get predicted effect sizes
predicted_values <- predict(meta_trait_treat3, newmods = c_treattemp = new_c_treattemp)
# Then make predictions using the model of interest.
newdata <- as.matrix(data.frame(c_treattemp = seq(min(rdata$c_treattemp), max(rdata$c_treattemp), length.out = 100)))
# Then make predictions using the model of interest.
sampledata <- as.matrix(data.frame(c_treattemp = seq(min(rdata$c_treattemp), max(rdata$c_treattemp), length.out = 100)))
preds <- data.frame(predict(meta_trait_treat3, newmods = sampledata, digits = 2, addx=TRUE))
preds
# You can plot the results if you want to visualize the relationship between c_treattemp and effect sizes.
plot(sampledata, preds$pred, type = "l", xlab = "c_treattemp", ylab = "Predicted Effect Size")
