result_l <- identical(alllong[j, 1:35], unique_rows[i,])
is.identical_l <- c(result_l, is.identical_l)
}
if(any(is.identical_r == TRUE)){  ## if there is an true index then there are rep values
combo_data$es.reproduction[i] <- rdata$es_reproduction[is.identical_r]
combo_data$v.reproduction[i] <-  rdata$v_reproduction[is.identical_r]
}
if(any(is.identical_l == TRUE)){ ## if there is an true index then there are long values
combo_data$es.longevity[i] <- alllong$es_longevity[is.identical_l]
combo_data$v.longevity[i] <-  alllong$v_longevity[is.identical_l]
}
View(combo_data)
combo_data[350]
combo_data[350,]
combo_data <- allrows
combo_data$es.reproduction <- NA
combo_data$v.reproduction <- NA
combo_data$es.longevity <- NA
combo_data$v.longevity <- NA
View(combo_data)
unique(duplicated(allrows))
duplicated(allrows)
i=100
is.identical_r <- c()
is.identical_l <- c()
for(j in 1:nrow(rdata)){
result_r <- identical(rdata[j, 1:35], allrows[i,])
is.identical_r <- c(result_r, is.identical_r)
}
for(j in 1:nrow(alllong)){
result_l <- identical(alllong[j, 1:35], allrows[i,])
is.identical_l <- c(result_l, is.identical_l)
}
if(any(is.identical_r == TRUE)){  ## if there is an true index then there are rep values
combo_data$es.reproduction[i] <- rdata$es_reproduction[is.identical_r]
combo_data$v.reproduction[i] <-  rdata$v_reproduction[is.identical_r]
}
if(any(is.identical_l == TRUE)){ ## if there is an true index then there are long values
combo_data$es.longevity[i] <- alllong$es_longevity[is.identical_l]
combo_data$v.longevity[i] <-  alllong$v_longevity[is.identical_l]
}
View(combo_data)
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
effectdata <-  subset(effectdata, Paper.code != "HUM251")
repdata_warm <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Warm" )
repdata_cool <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Cool" )
allrep <- rbind(repdata_warm, repdata_cool)
rdata <- allrep
### Read in effect size data
longdata_warm <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Warm" )
longdata_cool <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Cool" )
alllong <- rbind(longdata_warm, longdata_cool)
rdata$es_reproduction <- rdata$es
rdata$v_reproduction <- rdata$v
rdata <- subset(rdata, select = -es)
rdata <- subset(rdata, select = -v)
alllong$es_longevity <- alllong$es
alllong$v_longevity <- alllong$v
alllong <- subset(alllong, select = -es)
alllong <- subset(alllong, select = -v)
alllong <- subset(alllong, select = -(Trait.category))
alllong <- subset(alllong, select = -(Trait))
alllong <- alllong[,-1]
alllong <- subset(alllong, select = -Effect.size.code)
rdata <- subset(rdata, select = -(Trait.category))
rdata <- subset(rdata, select = -(Trait))
rdata <- rdata[,-1]
rdata <- subset(rdata, select = -Effect.size.code)
allrows <- rbind(rdata[,1:35], alllong[,1:35])
combo_data <- allrows
combo_data$es.reproduction <- NA
combo_data$v.reproduction <- NA
combo_data$es.longevity <- NA
combo_data$v.longevity <- NA
for (i in 1:nrow(combo_data)) {
cat("Calculating row", i, "/2084", "\n")
is_matching_r <- rep(FALSE, nrow(rdata))
is_matching_l <- rep(FALSE, nrow(alllong))
for (j in 1:nrow(rdata)) {
if (all(allrows[i, 1:35] == rdata[j, 1:35])) {
is_matching_r[j] <- TRUE
break  # Break out of the loop once a match is found
}
}
for (j in 1:nrow(alllong)) {
if (all(allrows[i, 1:35] == alllong[j, 1:35])) {
is_matching_l[j] <- TRUE
break  # Break out of the loop once a match is found
}
}
if (any(is_matching_r)) {
# Extract values from rdata and assign to combo_data
combo_data$es.reproduction[i] <- rdata$es_reproduction[is_matching_r]
combo_data$v.reproduction[i] <- rdata$v_reproduction[is_matching_r]
}
if (any(is_matching_l)) {
# Extract values from alllong and assign to combo_data
combo_data$es.longevity[i] <- alllong$es_longevity[is_matching_l]
combo_data$v.longevity[i] <- alllong$v_longevity[is_matching_l]
}
}
all(allrows[1, 1:35] == rdata[1, 1:35])
all(allrows[1, 1:35] == rdata[2, 1:35])
View(allrows)
View(rdata)
all(allrows[1, 1:35] == rdata[1, 1:35])
allrows[1, 1:35] == rdata[1, 1:35]
allrows[1, 1:35] == rdata[1, 1:35]
all(allrows[1, 1:35] == rdata[1, 1:35])
all(allrows[1, 1:35] == rdata[1, 1:35], na.rm=T)
combo_data <- allrows
combo_data$es.reproduction <- NA
combo_data$v.reproduction <- NA
combo_data$es.longevity <- NA
combo_data$v.longevity <- NA
for (i in 1:nrow(combo_data)) {
cat("Calculating row", i, "/2084", "\n")
is_matching_r <- rep(FALSE, nrow(rdata))
is_matching_l <- rep(FALSE, nrow(alllong))
for (j in 1:nrow(rdata)) {
if (all(allrows[i, 1:35] == rdata[j, 1:35], na.rm=T)) {
is_matching_r[j] <- TRUE
break  # Break out of the loop once a match is found
}
}
for (j in 1:nrow(alllong)) {
if (all(allrows[i, 1:35] == alllong[j, 1:35], na.rm=T)) {
is_matching_l[j] <- TRUE
break  # Break out of the loop once a match is found
}
}
if (any(is_matching_r)) {
# Extract values from rdata and assign to combo_data
combo_data$es.reproduction[i] <- rdata$es_reproduction[is_matching_r]
combo_data$v.reproduction[i] <- rdata$v_reproduction[is_matching_r]
}
if (any(is_matching_l)) {
# Extract values from alllong and assign to combo_data
combo_data$es.longevity[i] <- alllong$es_longevity[is_matching_l]
combo_data$v.longevity[i] <- alllong$v_longevity[is_matching_l]
}
}
View(allrows)
View(alllong)
View(alllong)
View(combo_data)
write.csv(combo_data, "Data/duplicate_combo_data.csv")
u_combo <- unique(combo_data)
View(u_combo)
write.csv(u_combo, "Data/unique_combo_data.csv")
df_cleaned <- u_combo[!is.na(u_combo$es.reproduction), ]
View(u_combo)
df_cleaned <- u_combo[!is.na(u_combo$es.longevity), ]
View(u_combo)
df_cleaned <- u_combo[!is.na(u_combo$es.reproduction), ]
df_cleaned <- df_cleaned[!is.na(df_cleaned$es.longevity), ]
View(df_cleaned)
nrow(df_cleaned)
write.csv(df_cleaned, "cleaned_unique_combo.csv")
write.csv(df_cleaned, "Data/cleaned_unique_combo.csv")
rm(list=ls()) # Clear R environment
library(metafor)
library(ggplot2)
library(ape)
library(rotl)
library(multcomp)
library(dplyr)
library(ggtree)
# To install the orchaRd package:
#install.packages("pacman")
#pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, emmeans)
#devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
library(clubSandwich)
library(rmarkdown)
##########################################################################################################
#--------------#
# 1. Setup     #
#--------------#
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
longdata_warm <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Warm" )
longdata_cool <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Cool" )
alllong <- rbind(longdata_warm, longdata_cool)
### select data for analysis
rdata <- alllong
rdata <- subset(rdata, Paper.code != "HUM251")
########### change species names in survival data ####################################
classes <- read.csv("Data/Species_classifications.CSV") ## read in species classifications from map
rdata$Species.latin[which(rdata$Species.latin == "Marasmia exigua")]                <- "Cnaphalocrocis exigua"
rdata$Species.latin[which(rdata$Species.latin == "Matsumuratettix hieroglyphicus")] <- "Matsumuratettix hiroglyphicus"
rdata$Species.latin[which(rdata$Species.latin == "Mythimna roseilinea")]            <- "Mythimna albipuncta"
rdata$Species.latin[which(rdata$Species.latin == "Apis craccivora")]                <- "Aphis craccivora"
rdata$Species.latin[which(rdata$Species.latin == "Cryptoleamus montrouzieri")]      <- "Cryptolaemus montrouzieri"
rdata$Species.latin[which(rdata$Species.latin == "Asplanchna brightwelli")]         <- "Asplanchna brightwellii"
rdata$Species.latin[which(rdata$Species.latin == "Brennandania lambi")]             <- "Pygmephorus lambi"
rdata$Species.latin[which(rdata$Species.latin == "Amblyseius alstoniae")]           <- "Euseius alstoniae"
rdata$Species.latin[which(rdata$Species.latin == "Siphoninus phyllyreae")]          <- "Siphoninus phillyreae"
rdata$Species.latin[which(rdata$Species.latin == "Proprioseiopsis asetus")]         <- "Amblyseius asetus"
rdata$Species.latin[which(rdata$Species.latin == "Parabemisia myrica")]             <- "Parabemisia myricae"
rdata$Species.latin[which(rdata$Species.latin == "Cirrospilus sp. near lyncus")]    <- "Cirrospilus lyncus"
rdata$Species.latin[which(rdata$Species.latin == "Anagyrus sp. nov. nr. sinope" )]  <- "Anagyrus sinope"
rdata$Species.latin[which(rdata$Species.latin == "Monochamus leuconotus")]          <- "Anthores leuconotus"
rdata$Species.latin[which(rdata$Species.latin == "Ropalosiphum maidis")]            <- "Rhopalosiphum maidis"
rdata$Species.latin[which(rdata$Species.latin == "Artemia fransiscana")]            <- "Artemia franciscana"
rdata$Species.latin[which(rdata$Species.latin == "Blathyplectes curculionis")]      <- "Bathyplectes curculionis"
rdata$Species.latin[which(rdata$Species.latin == "Menochilus sexmaculatus")]        <- "Cheilomenes sexmaculata"
rdata$Species.latin[which(rdata$Species.latin == "unknown (Tominic)")]              <- "Trichogramma"
### specify classifications from map
rdata$Class <- classes$class[match(rdata$Species.latin, classes$species_latin)]
### Create random factors into data frame
rdata$obs <- factor(c(1:nrow(rdata)))                # Unique observation code
rdata$study_code <- factor(rdata$Paper.code)         # Model requires column names study_code (this is biggest level of nested code structure)
rdata$Species.phylo <- factor(rdata$Species.latin)   # Species names for phylo matrix
rdata$species <- factor(rdata$Species.latin)         # Another species column for ranom factor
precision <- sqrt(1/rdata$v)                         # inverse standard error
rdata[,"precision"] <- precision
str(rdata)
nlevels(rdata$species)    # Check number of species
nlevels(rdata$study_code) # Check number of studies
#### Import Tree #############
## import tree from map
tree1 <- read.nexus("Phylogeny/all_long_excHUM251_tree.nex")
tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian")
# Simple model (no random effects)
meta1 <- rma.uni(es, v, data= rdata, method= "REML")
summary(meta1)
# Adding four random factors
meta2 <- rma.mv(es, v, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
summary(meta2)
i2_ml(meta2, method=c("ratio")) # Heterogeneity at each random factor level
# Accounting for non-independence of data points from the same experiment
# Assumes a correlation of 0.5 between effect sizes from the same experiment
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
# Add new shared_control variance matrix into the mixed-effects meta-analysis model
meta3 <- rma.mv(es, VCV_shared, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
summary(meta3)
i2_ml(meta3, method=c("ratio")) # Heterogeneity at each random factor level
## without phylogeny or species
meta4 <- rma.mv(es, VCV_shared, random= list(~ 1|study_code, ~1|obs), data= rdata, method= "REML")
summary(meta4)
i2_ml(meta4, method=c("ratio"))
## without phylogeny, species or study_code
meta7 <- rma.mv(es, VCV_shared, random= list(~ 1|obs), data= rdata, method= "REML")
summary(meta7)
i2_ml(meta7, method=c("ratio")) # Heterogeneity at each random factor level
# Single categorical factor added as a fixed effect
# warm/cool
meta_trait_warm <- rma.mv(es, VCV_shared,  mod= ~warm.cool, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_warm)
# warm/cool -1
meta_trait_warm_nointer <- rma.mv(es, VCV_shared,  mod= ~warm.cool-1, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_warm_nointer)
# ref temp
meta_trait_ref <- rma.mv(es, VCV_shared,  mod= ~reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_ref)
# treat temp
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treattemp)
# treat temp^2
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~ poly(treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treat2)
# treat temp^3
meta_trait_treat3 <- rma.mv(es, VCV_shared,  mod= ~ poly(treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treat3)
# diff temp
meta_trait_diff <- rma.mv(es, VCV_shared,  mod= ~diff, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_diff)
# all fixed effects
meta_trait_all <- rma.mv(es, VCV_shared,  mod= ~warm.cool + diff + treattemp + reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_all)
### binned treatment max temperatures.
rdata$bin.temp <- c(NA)
rdata$bin.temp[which(rdata$treattemp >= 40)] <- ">40"
rdata$bin.temp[which(rdata$treattemp >= 35 & rdata$treattemp <40)] <- "35-40"
rdata$bin.temp[which(rdata$treattemp >= 30 & rdata$treattemp <35)] <- "30-35"
rdata$bin.temp[which(rdata$treattemp >= 25 & rdata$treattemp <30)] <- "25-30"
rdata$bin.temp[which(rdata$treattemp >= 20 & rdata$treattemp <25)] <- "20-25"
rdata$bin.temp[which(rdata$treattemp >= 15 & rdata$treattemp <20)] <- "15-20"
rdata$bin.temp[which(rdata$treattemp <15)] <- "<15"
rdata$bin.temp <- factor(rdata$bin.temp)
levels(rdata$bin.temp)
table(rdata$bin.temp)
# binned temps
meta_trait_bintemp <- rma.mv(es, VCV_shared,  mod= ~bin.temp-1,  random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_bintemp)
## Publication Bias.
meta_year <- rma.mv(es, VCV_shared,  mod= ~Publication.year,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_year)
# Sensitivty Analysis
# Preform a sensitivity analysis by removing the smallest and largest 2.5% of effect sizes.
minq <- quantile(rdata$es, 0.025)
maxq <- quantile(rdata$es, 0.975)
sdata <- subset(rdata, es > minq & es < maxq)
## Treatment temperature as a cubic effect (sesnsitivity analysis)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run cubic model
meta_sa_treat3 <- rma.mv(es, VCV_shared_sa,  mod= ~ poly(treattemp, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
summary(meta_sa_treat3)
# re-run binned temps model
meta_sa_bintemp <- rma.mv(es, VCV_shared_sa,  mod= ~bin.temp-1,
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
summary(meta_sa_bintemp)
###########################################################################################################
# Other fixed effects
meta_bintemp_habitat <- rma.mv(es, VCV_shared,  mod= ~bin.temp * Habitat,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_bintemp_habitat)
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
setwd("~/GitHub/Thermal_Fertility_Meta-Analysis/Rmarkdown")
render("meta_analysis_longevity.Rmd")
meta5 <- rma.mv(es, VCV_shared, random= list(~ 1|species, ~ 1|study_code, ~1|obs), data= rdata, method= "REML")
summary(meta5)
i2_ml(meta5, method=c("ratio"))
render("meta_analysis_longevity.Rmd")
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
setwd("~/GitHub/Thermal_Fertility_Meta-Analysis")
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
### Read in effect size data
effectdata <- read.csv("Survival project all pairwise.es.csv")
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
survdata_warm <- subset(effectdata, Trait.category == "Survival" & warm.cool == "Warm" )
survdata_cool <- subset(effectdata, Trait.category == "Survival" & warm.cool == "Cool" )
allsurv <- rbind(survdata_warm, survdata_cool)
### select data for analysis
rdata <- allsurv
rdata <- subset(rdata, Paper.code != "HUM251")
########### change species names in survival data ####################################
classes <- read.csv("Species_classifications.CSV") ## read in species classifications from map
rdata$Species.latin[which(rdata$Species.latin == "Marasmia exigua")]                <- "Cnaphalocrocis exigua"
rdata$Species.latin[which(rdata$Species.latin == "Apis craccivora")]                <- "Aphis craccivora"
rdata$Species.latin[which(rdata$Species.latin == "Brennandania lambi")]             <- "Pygmephorus lambi"
rdata$Species.latin[which(rdata$Species.latin == "Proprioseiopsis asetus")]         <- "Amblyseius asetus"
rdata$Species.latin[which(rdata$Species.latin == "Parabemisia myrica")]             <- "Parabemisia myricae"
rdata$Species.latin[which(rdata$Species.latin == "Monochamus leuconotus")]          <- "Anthores leuconotus"
rdata$Species.latin[which(rdata$Species.latin == "Blathyplectes curculionis")]      <- "Bathyplectes curculionis"
rdata$Species.latin[which(rdata$Species.latin == "Menochilus sexmaculatus")]        <- "Cheilomenes sexmaculata"
rdata$Species.latin[which(rdata$Species.latin == "unknown (Tominic)")]              <- "Trichogramma"
### specify classifications from map
rdata$Class <- classes$class[match(rdata$Species.latin, classes$species_latin)]
classes <- read.csv("Species_classifications.CSV")
classes <- read.csv("Data/Species_classifications.CSV")
rdata$Species.latin[which(rdata$Species.latin == "Marasmia exigua")]                <- "Cnaphalocrocis exigua"
rdata$Species.latin[which(rdata$Species.latin == "Matsumuratettix hieroglyphicus")] <- "Matsumuratettix hiroglyphicus"
rdata$Species.latin[which(rdata$Species.latin == "Mythimna roseilinea")]            <- "Mythimna albipuncta"
rdata$Species.latin[which(rdata$Species.latin == "Apis craccivora")]                <- "Aphis craccivora"
rdata$Species.latin[which(rdata$Species.latin == "Cryptoleamus montrouzieri")]      <- "Cryptolaemus montrouzieri"
rdata$Species.latin[which(rdata$Species.latin == "Asplanchna brightwelli")]         <- "Asplanchna brightwellii"
rdata$Species.latin[which(rdata$Species.latin == "Brennandania lambi")]             <- "Pygmephorus lambi"
rdata$Species.latin[which(rdata$Species.latin == "Amblyseius alstoniae")]           <- "Euseius alstoniae"
rdata$Species.latin[which(rdata$Species.latin == "Siphoninus phyllyreae")]          <- "Siphoninus phillyreae"
rdata$Species.latin[which(rdata$Species.latin == "Proprioseiopsis asetus")]         <- "Amblyseius asetus"
rdata$Species.latin[which(rdata$Species.latin == "Parabemisia myrica")]             <- "Parabemisia myricae"
rdata$Species.latin[which(rdata$Species.latin == "Cirrospilus sp. near lyncus")]    <- "Cirrospilus lyncus"
rdata$Species.latin[which(rdata$Species.latin == "Anagyrus sp. nov. nr. sinope" )]  <- "Anagyrus sinope"
rdata$Species.latin[which(rdata$Species.latin == "Monochamus leuconotus")]          <- "Anthores leuconotus"
rdata$Species.latin[which(rdata$Species.latin == "Ropalosiphum maidis")]            <- "Rhopalosiphum maidis"
rdata$Species.latin[which(rdata$Species.latin == "Artemia fransiscana")]            <- "Artemia franciscana"
rdata$Species.latin[which(rdata$Species.latin == "Blathyplectes curculionis")]      <- "Bathyplectes curculionis"
rdata$Species.latin[which(rdata$Species.latin == "Menochilus sexmaculatus")]        <- "Cheilomenes sexmaculata"
rdata$Species.latin[which(rdata$Species.latin == "unknown (Tominic)")]              <- "Trichogramma"
### specify classifications from map
rdata$Class <- classes$class[match(rdata$Species.latin, classes$species_latin)]
rdata$obs <- factor(c(1:nrow(rdata)))                # Unique observation code
rdata$study_code <- factor(rdata$Paper.code)         # Model requires column names study_code
rdata$Species.phylo <- factor(rdata$Species.latin)   # Species names for phylo matrix
rdata$species <- factor(rdata$Species.latin)         # Another species column for random factor
precision <- sqrt(1/rdata$v)                         # inverse standard error
rdata[,"precision"] <- precision
nlevels(rdata$species)    # Check number of species
nlevels(rdata$study_code) # Check number of studies
## import tree from map
tree1 <- read.nexus("Phylogeny/all_surv_excHUM251_tree.nex")
tree1 <- read.nexus("Phylogeny/all_surv_excHUM251_tree.nex")
library(ggtree)
tree1 <- read.nexus("Phylogeny/all_surv_excHUM251_tree.nex")
tree1 <- read.nexus("Phylogeny/all_surv_excHUM251_tree.nex")
library(metafor)
library(ggplot2)
library(ape)
library(rotl)
library(multcomp)
library(dplyr)
# To install the orchaRd package:
#install.packages("pacman")
#pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, emmeans)
#devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
tree1 <- read.nexus("Phylogeny/all_surv_excHUM251_tree.nex")
tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
## import tree from map
notin <- setdiff(tree1$tip.label, rdata$Species.latin)
indata <- setdiff(tree1$tip.label, notin)
## prune tree
prune_tree <- drop.tip(tree_grafen, notin)
phylo_matrix <- vcv(prune_tree, cor=TRUE, model="Brownian")
## number of indata should equal # of unique rdata species.
## we are currently 15 out.
setdiff(unique(rdata$Species.latin), indata)
##### create data frame and plot tree ###################
plot_data <- c()
plot_data$species_latin <- indata
plot_data$class <- rdata$Class[match(indata, rdata$Species.latin)]
plot_data <- as.data.frame(unique(plot_data))
colnames(plot_data) <- c("species_latin", "class")
plot_data$class[which(plot_data$class == "Arachnid")] <- "Arachnida"
plot_data$class[which(plot_data$class == "Insect")] <- "Insecta"
ggtree(prune_tree, layout = "circular", lwd = 0.1) %<+% plot_data +
geom_tiplab(size=1.2, offset=0.01) +
aes(col = class)
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
library(clubSandwich)
library(metafor)
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
render("meta-analysis_survival.Rmd")
library(rmarkdown)
library(ggtree)
render("meta-analysis_survival.Rmd")
setwd("~/GitHub/Thermal_Fertility_Meta-Analysis/Rmarkdown")
render("meta-analysis_survival.Rmd")
setwd("~/GitHub/Thermal_Fertility_Meta-Analysis")
render("meta-analysis_survival.Rmd")
### Read in effect size data
effectdata <- read.csv("./Data/Survival project all pairwise.es.csv")
### Read in effect size data
effectdata <- read.csv("./Data/Survival project all pairwise.es.csv")
### Read in effect size data
effectdata <- read.csv("./Data/Survival project all pairwise.es.csv")
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
########### change species names in survival data ####################################
classes <- read.csv("Data/Species_classifications.CSV") ## read in species classifications from map
install.packages("pacman")
pacman::p_load(tidyverse, here, metafor)
install.packages("pacman")
library(tidyverse)
library(here)
library(metafor)
## Load in the finalised data
data <- read.csv(here("data", "cleaned_unique_combo.csv"))
# We should have a longevity AND reproduction effect size for each single experiment ID. This means we should have at least 2 values for each experiment ID. We should not have 1.
data %>% group_by(Experiment.code) %>% summarise(n = n()) %>% filter(n < 2)
# OUTCOME: We have at least 38 rows with a single effect size. That's not going to work.
# Now we need to see if we have more than 2. If we have more than 2 then the coding has not been set up correctly because each logenvity and reproduction effect size shoud be paired.
data %>% group_by(Experiment.code) %>% summarise(n = n()) %>% filter(n >2)
# OUTCOME: We have 112 experiment codes where we have at least 4-5 effect sizes. For each Experiment code, assuming I understand what that is meant to mean (probably not) we should have 2 effect sizes. One longevity and one reproduction. So, we either 1) need to create a new combined column that gets us down to that level or 2) we need to add a trial column to the data that identified which two come from the same trial.
# Looking more closely at these data they are organised wide, so that explains first check, but check 2 may still be problematic. Lets just orient the data length wise.
data_long <- data %>% pivot_longer(cols = c(es.reproduction, es.longevity, v.reproduction, v.longevity), names_to = "outcome", values_to = "es") %>% data.frame()
# Not quite where we need it, so lets filter out v and then cbind together
data_long_es <- data_long %>% filter(outcome %in% c("es.reproduction", "es.longevity"))
data_long_v <- data_long %>% filter(outcome %in% c("v.reproduction", "v.longevity"))
# All information should now be ordered correctly and the dataframes the same dimenions. We can check
dim(data_long_es)
dim(data_long_v)
# Now, bind these together
data_long_final <- cbind(data_long_es, v = data_long_v$es)
# Now, lets check that this data is set up correctly. If we group by Experiment.code and outcome then we should have a maximum of 1 effect size for each study in each outcome category
data_long_final %>% group_by(Experiment.code, outcome) %>% summarise(n=n())
# OUTCOME: Nope. We do not have it set up like this so we need to be sure we can link each es.longevity to each es.reproduction.
data %>% group_by(Experiment.code) %>% summarise(n = n()) %>% filter(n >2)
data_long <- data %>% pivot_longer(cols = c(es.reproduction, es.longevity, v.reproduction, v.longevity), names_to = "outcome", values_to = "es") %>% data.frame()
# Not quite where we need it, so lets filter out v and then cbind together
data_long_es <- data_long %>% filter(outcome %in% c("es.reproduction", "es.longevity"))
data_long_v <- data_long %>% filter(outcome %in% c("v.reproduction", "v.longevity"))
# All information should now be ordered correctly and the dataframes the same dimenions. We can check
dim(data_long_es)
dim(data_long_v)
# Now, bind these together
data_long_final <- cbind(data_long_es, v = data_long_v$es)
# Now, lets check that this data is set up correctly. If we group by Experiment.code and outcome then we should have a maximum of 1 effect size for each study in each outcome category
data_long_final %>% group_by(Experiment.code, outcome) %>% summarise(n=n())
View(data)
library(readr)
unique_combo_data <- read_csv("Data/unique_combo_data.csv")
View(unique_combo_data)
n.srudies <- factor(unique_combo_data$Paper.code)
nlevels(n.srudies)
n.srudies <- factor(data$Paper.code)
nlevels(n.srudies)
View(unique_combo_data)
combo_both <- subset(unique_combo_data, Sex="Both")
combo_both <- subset(unique_combo_data, Sex= "Both")
combo_both <- subset(unique_combo_data, Sex= Both)
combo_both <- subset(unique_combo_data, Sex = Both)
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
repdata_warm <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Warm" )
repdata_cool <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Cool" )
allrep <- rbind(repdata_warm, repdata_cool)
View(allrep)
library(readr)
unique_combo_data <- read_csv("Data/unique_combo_data.csv")
View(unique_combo_data)
View(allrep)
