tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
tree <- ape::multi2di(tree_grafen, random = TRUE)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
# use a randomization approach to deal with polytomies.
# Could this this approach or another detailed here: https://search.r-project.org/CRAN/refmans/RRphylo/html/fix.poly.html
#| echo: false
#| warning: false
#| include: false
# Adding four random factors
if(rerun){
meta2 <- rma.mv(es, v, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta2, here("Output", "models", "reproduction", "mv_rep_2.rds"))
} else {
meta2 <- readRDS(here("Output", "models", "reproduction", "mv_rep_2.rds"))
}
#| echo: false
#| warning: false
#| include: false
# Assumes a correlation of 0.5 between effect sizes from the same experiment
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
# Add new variance matrix for shared_control into the mixed-effects meta-analysis model
if(rerun){
meta3 <- rma.mv(es, VCV_shared, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta3, here("Output", "models", "reproduction", "mv_rep_3.rds"))
} else {
meta3 <-  readRDS(here("Output", "models", "reproduction", "mv_rep_3.rds"))
}
#| echo: false
#| warning: false
#| include: true
#| eval: false
summary(meta3)
i2_ml(meta3, method=c("ratio"))
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
## without phylogeny or species
meta4 <- rma.mv(es, VCV_shared, random= list(~ 1|study_code, ~1|obs), data= rdata, method= "REML")
saveRDS(meta4, here("Output", "models", "reproduction", "mv_rep_4.rds"))
## without phylogeny
meta5 <- rma.mv(es, VCV_shared, random= list(~ 1|species, ~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta5, here("Output", "models", "reproduction", "mv_rep_5.rds"))
## without phylogeny, species or study_code
meta7 <- rma.mv(es, VCV_shared, random= list(~1|obs), data= rdata, method= "REML")
saveRDS(meta7, here("Output", "models", "reproduction", "mv_rep_7.rds"))
} else {
meta4 <- readRDS(here("Output", "models", "reproduction", "mv_rep_4.rds"))
meta5 <- readRDS(here("Output", "models", "reproduction",  "mv_rep_5.rds"))
meta7 <- readRDS(here("Output", "models", "reproduction", "mv_rep_7.rds"))
}
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
# warm/cool
meta_trait_warm <- rma.mv(es, VCV_shared,  mod= ~warm.cool, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm, here("Output", "models", "reproduction", "mv_rep_warm.rds"))
# warm/cool -1
meta_trait_warm_nointer <- rma.mv(es, VCV_shared,  mod= ~warm.cool-1, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm_nointer, here("Output", "models", "reproduction", "mv_rep_warm-1.rds"))
# ref temp
meta_trait_ref <- rma.mv(es, VCV_shared,  mod= ~reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_ref, here("Output", "models", "reproduction", "mv_rep_ref.rds"))
# treat temp centered
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treattemp, here("Output", "models", "reproduction", "mv_rep_ctemp.rds"))
# treat temp^2 centered
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat2, here("Output", "models", "mv_rep_ctemp2.rds"))
# treat temp^3 centered
meta_trait_treat3 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat2, here("Output", "models", "mv_rep_ctemp3.rds"))
saveRDS(meta_trait_treat3, here("Output", "models", "reproduction", "mv_rep_ctemp3.rds"))
# diff temp
meta_trait_diff <- rma.mv(es, VCV_shared,  mod= ~diff, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_diff, here("Output", "models", "reproduction", "mv_rep_diff.rds"))
### binned treatment max temperatures.
rdata$bin.temp <- c(NA)
rdata$bin.temp[which(rdata$treattemp >= 40)] <- ">40"
rdata$bin.temp[which(rdata$treattemp >= 35 & rdata$treattemp <40)] <- "35-40"
rdata$bin.temp[which(rdata$treattemp >= 30 & rdata$treattemp <35)] <- "30-35"
rdata$bin.temp[which(rdata$treattemp >= 25 & rdata$treattemp <30)] <- "25-30"
rdata$bin.temp[which(rdata$treattemp >= 20 & rdata$treattemp <25)] <- "20-25"
rdata$bin.temp[which(rdata$treattemp >= 15 & rdata$treattemp <20)] <- "15-20"
rdata$bin.temp[which(rdata$treattemp <15)] <- "<15"
rdata$bin.temp <- factor(rdata$bin.temp)
levels(rdata$bin.temp)
table(rdata$bin.temp)
# binned temps
meta_trait_bintemp <- rma.mv(es, VCV_shared,  mod= ~bin.temp-1,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_bintemp, here("Output", "models", "reproduction", "mv_rep_bintemp.rds"))
} else {
meta_trait_warm  <- readRDS(here("Output", "models", "reproduction", "mv_rep_warm.rds"))
meta_trait_warm_nointer  <- readRDS(here("Output", "models", "reproduction", "mv_rep_warm-1.rds"))
meta_trait_ref <- readRDS(here("Output", "models", "reproduction", "mv_rep_ref.rds"))
meta_trait_treattemp  <- readRDS(here("Output", "models", "reproduction", "mv_rep_ctemp.rds"))
meta_trait_treat2  <- readRDS(here("Output", "models", "mv_rep_ctemp2.rds"))
meta_trait_treat3  <- readRDS(here("Output", "models", "mv_rep_ctemp3.rds"))
meta_trait_diff <- readRDS(here("Output", "models", "reproduction", "mv_rep_diff.rds"))
meta_trait_bintemp <-  readRDS(here("Output", "models", "reproduction", "mv_rep_bintemp.rds"))
}
meta_trait_treat3 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat3, here("Output", "models", "reproduction", "mv_rep_ctemp3.rds"))
summary(meta_trait_treat2)
summary(meta_trait_treat2)
summary(meta_trait_treat3)
bubble_plot(meta_trait_treat3, mod = "c_treattemp", group="study_code")
p+coord_cartesian(ylim=c(-10,10)) + labs(x = "Temperature deviation from 25C")
p<- bubble_plot(meta_trait_treat3, mod = "c_treattemp", group="study_code")
p+coord_cartesian(ylim=c(-10,10)) + labs(x = "Temperature deviation from 25C")
p<- bubble_plot(meta_trait_treat3, mod = "c_treattemp", group="study_code")
p+ labs(x = "Temperature deviation from 25C")
#| echo: false
#| warning: false
#| include: false
#| eval: true
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
#| echo: false
#| warning: false
#| include: false
### Read in effect size data
effectdata <- read.csv(here("Data", "Survival project all pairwise.es.csv"))
### select data for analysis
longdata_warm <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Warm" )
longdata_cool <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Cool" )
alllong <- rbind(longdata_warm, longdata_cool)
rdata <- alllong
### Species names which need changing for phylogeny.
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea ashmeadi")]              <- "Gonatocerus ashmeadi"
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea triguttata")]   <- "Gonatocerus triguttatus"
rdata$Species.latin[which(rdata$Species.latin == "Mythimna roseilinea")]            <-  "Mythimna albipuncta"
rdata$Species.latin[which(rdata$Species.latin == "Daphnia australis")]            <-  "Daphniopsis australis"
### Create random factors into data frame
rdata$obs <- factor(c(1:nrow(rdata)))                # Unique observation code
rdata$study_code <- factor(rdata$Paper.code)         # Model requires column names study_code (this is biggest level of nested code structure)
rdata$Species.phylo <- factor(rdata$Species.latin)   # Species names for phylo matrix
rdata$species <- factor(rdata$Species.latin)         # Another species column for ranom factor
precision <- sqrt(1/rdata$v)                         # inverse standard error
rdata[,"precision"] <- precision
str(rdata)
nlevels(rdata$species)    # Check number of species
nlevels(rdata$study_code) # Check number of studies
#### Import Tree #############
tree1 <- read.nexus(here("Phylogeny", "all_long_excHUM251_tree.nex"))
tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
tree <- ape::multi2di(tree_grafen, random = TRUE)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
# use a randomization approach to deal with polytomies.
# Could this this approach or another detailed here: https://search.r-project.org/CRAN/refmans/RRphylo/html/fix.poly.html
#| echo: false
#| warning: false
#| include: false
#|
# Simple model (no random effects)
if(rerun){
meta1 <- rma.uni(es, v, data= rdata, method= "REML")
summary(meta1)}
#| echo: false
#| warning: false
#| include: false
#| eval: true
## rerun all models?
rerun <- FALSE
#| echo: false
#| warning: false
#| include: false
#|
# Adding four random factors
if(rerun){
meta2 <- rma.mv(es, v, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta2, here("Output", "models", "longevity", "mv_long_2.rds"))
} else {
meta2 <- readRDS(here("Output", "models", "longevity", "mv_long_2.rds"))
}
#| echo: false
#| warning: false
#| include: false
# Assumes a correlation of 0.5 between effect sizes from the same experiment
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
# Add new variance matrix for shared_control into the mixed-effects meta-analysis model
if(rerun){
meta3 <- rma.mv(es, VCV_shared, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta3, here("Output", "models", "longevity", "mv_long_3.rds"))
} else {
meta3 <-  readRDS(here("Output", "models", "longevity", "mv_long_3.rds"))
}
#| echo: false
#| warning: false
#| include: true
#| eval: false
summary(meta3)
i2_ml(meta3, method=c("ratio"))
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
## without phylogeny or species
meta4 <- rma.mv(es, VCV_shared, random= list(~ 1|study_code, ~1|obs), data= rdata, method= "REML")
saveRDS(meta4, here("Output", "models", "longevity", "mv_long_4.rds"))
## without phylogeny
meta5 <- rma.mv(es, VCV_shared, random= list(~ 1|species, ~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta5, here("Output", "models", "longevity", "mv_long_5.rds"))
## without phylogeny, species or study_code
meta7 <- rma.mv(es, VCV_shared, random= list(~1|obs), data= rdata, method= "REML")
saveRDS(meta7, here("Output", "models", "longevity", "mv_long_7.rds"))
} else {
meta4 <- readRDS(here("Output", "models", "longevity", "mv_long_4.rds"))
meta5 <- readRDS(here("Output", "models", "longevity",  "mv_long_5.rds"))
meta7 <- readRDS(here("Output", "models", "longevity", "mv_long_7.rds"))
}
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
# warm/cool
meta_trait_warm <- rma.mv(es, VCV_shared,  mod= ~warm.cool, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm, here("Output", "models", "longevity", "mv_long_warm.rds"))
# warm/cool -1
meta_trait_warm_nointer <- rma.mv(es, VCV_shared,  mod= ~warm.cool-1, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm_nointer, here("Output", "models", "longevity", "mv_long_warm-1.rds"))
# ref temp
meta_trait_ref <- rma.mv(es, VCV_shared,  mod= ~reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_ref, here("Output", "models", "longevity", "mv_long_ref.rds"))
# treat temp centered
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treattemp, here("Output", "models", "longevity", "mv_long_ctemp.rds"))
# treat temp^2 centered
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat2, here("Output", "models", "longevity",  "mv_long_ctemp2.rds"))
# treat temp^3 centered
meta_trait_treat3 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat3, here("Output", "models", "longevity", "mv_long_ctemp3.rds"))
# treat temp^4 centered
meta_trait_treat4 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=4, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat3, here("Output", "models", "longevity", "mv_long_ctemp4.rds"))
# diff temp
meta_trait_diff <- rma.mv(es, VCV_shared,  mod= ~diff, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_diff, here("Output", "models", "longevity", "mv_long_diff.rds"))
### binned treatment max temperatures.
rdata$bin.temp <- c(NA)
rdata$bin.temp[which(rdata$treattemp >= 40)] <- ">40"
rdata$bin.temp[which(rdata$treattemp >= 35 & rdata$treattemp <40)] <- "35-40"
rdata$bin.temp[which(rdata$treattemp >= 30 & rdata$treattemp <35)] <- "30-35"
rdata$bin.temp[which(rdata$treattemp >= 25 & rdata$treattemp <30)] <- "25-30"
rdata$bin.temp[which(rdata$treattemp >= 20 & rdata$treattemp <25)] <- "20-25"
rdata$bin.temp[which(rdata$treattemp >= 15 & rdata$treattemp <20)] <- "15-20"
rdata$bin.temp[which(rdata$treattemp <15)] <- "<15"
rdata$bin.temp <- factor(rdata$bin.temp)
levels(rdata$bin.temp)
table(rdata$bin.temp)
# binned temps
meta_trait_bintemp <- rma.mv(es, VCV_shared,  mod= ~bin.temp-1,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_bintemp, here("Output", "models", "longevity", "mv_long_bintemp.rds"))
} else {
meta_trait_warm  <- readRDS(here("Output", "models", "longevity", "mv_long_warm.rds"))
meta_trait_warm_nointer  <- readRDS(here("Output", "models", "longevity", "mv_long_warm-1.rds"))
meta_trait_ref <- readRDS(here("Output", "models", "longevity", "mv_long_ref.rds"))
meta_trait_treattemp  <- readRDS(here("Output", "models", "longevity", "mv_long_ctemp.rds"))
meta_trait_treat2  <- readRDS(here("Output", "models", "longevity", "mv_long_ctemp2.rds"))
meta_trait_diff <- readRDS(here("Output", "models", "longevity", "mv_long_diff.rds"))
meta_trait_bintemp <-  readRDS(here("Output", "models", "longevity", "mv_long_bintemp.rds"))
meta_trait_treat3 <- readRDS(here("Output", "models", "longevity", "mv_long_ctemp3.rds"))
meta_trait_treat4 <- readRDS(here("Output", "models", "longevity", "mv_long_ctemp4.rds"))
}
# treat temp^4 centered
meta_trait_treat4 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=4, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat3, here("Output", "models", "longevity", "mv_long_ctemp4.rds"))
AIC(meta_trait_treat3)
AIC(meta_trait_treat4)
meta_trait_treat4$b
meta_trait_treat3$b
meta_trait_treat3$pval
meta_trait_treat4$pval
round(meta_trait_treat4$pval,2)
round(meta_trait_treat4$b,2)
round(meta_trait_treat4$b,4)
p <- bubble_plot(meta_trait_treat4, mod = "c_treattemp", group="study_code")
p+coord_cartesian(ylim=c(-10,10)) + labs(x = "Temperature deviation from 25")
meta_trait_treat5 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=5, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
AIC(meta_trait_treat4)
AIC(meta_trait_treat5)
p <- bubble_plot(meta_trait_treat5, mod = "c_treattemp", group="study_code")
p+coord_cartesian(ylim=c(-10,10)) + labs(x = "Temperature deviation from 25")
summary(meta_trait_treat5)
#| echo: false
#| warning: false
#| include: false
#| eval: true
## rerun all models?
rerun <- FALSE
#| echo: false
#| warning: false
#| include: false
### Read in effect size data
effectdata <- read.csv(here("Data", "Survival project all pairwise.es.csv"))
### select data for analysis
repdata_warm <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Warm" )
repdata_cool <- subset(effectdata, Trait.category == "Reproduction" & warm.cool == "Cool" )
allrep <- rbind(repdata_warm, repdata_cool)
rdata <- allrep
### Species names which need changing for phylogeny.
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea ashmeadi")]              <- "Gonatocerus ashmeadi"
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea triguttata")]   <- "Gonatocerus triguttatus"
rdata$Species.latin[which(rdata$Species.latin == "Mythimna roseilinea")]            <-  "Mythimna albipuncta"
rdata$Species.latin[which(rdata$Species.latin == "Daphnia australis")]            <-  "Daphniopsis australis"
### Create random factors into data frame
rdata$obs <- factor(c(1:nrow(rdata)))                # Unique observation code
rdata$study_code <- factor(rdata$Paper.code)         # Model requires column names study_code (this is biggest level of nested code structure)
rdata$Species.phylo <- factor(rdata$Species.latin)   # Species names for phylo matrix
rdata$species <- factor(rdata$Species.latin)         # Another species column for ranom factor
precision <- sqrt(1/rdata$v)                         # inverse standard error
rdata[,"precision"] <- precision
str(rdata)
nlevels(rdata$species)    # Check number of species
nlevels(rdata$study_code) # Check number of studies
#### Import Tree #############
tree1 <- read.nexus(here("Phylogeny", "all_rep_excHUM251_tree.nex"))
tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
tree <- ape::multi2di(tree_grafen, random = TRUE)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
# use a randomization approach to deal with polytomies.
# Could this this approach or another detailed here: https://search.r-project.org/CRAN/refmans/RRphylo/html/fix.poly.html
#| echo: false
#| warning: false
#| include: false
#|
# Simple model (no random effects)
if(rerun){
meta1 <- rma.uni(es, v, data= rdata, method= "REML")
summary(meta1)}
#| echo: false
#| warning: false
#| include: false
# Adding four random factors
if(rerun){
meta2 <- rma.mv(es, v, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta2, here("Output", "models", "reproduction", "mv_rep_2.rds"))
} else {
meta2 <- readRDS(here("Output", "models", "reproduction", "mv_rep_2.rds"))
}
#| echo: false
#| warning: false
#| include: false
# Assumes a correlation of 0.5 between effect sizes from the same experiment
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
# Add new variance matrix for shared_control into the mixed-effects meta-analysis model
if(rerun){
meta3 <- rma.mv(es, VCV_shared, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
saveRDS(meta3, here("Output", "models", "reproduction", "mv_rep_3.rds"))
} else {
meta3 <-  readRDS(here("Output", "models", "reproduction", "mv_rep_3.rds"))
}
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
## without phylogeny or species
meta4 <- rma.mv(es, VCV_shared, random= list(~ 1|study_code, ~1|obs), data= rdata, method= "REML")
saveRDS(meta4, here("Output", "models", "reproduction", "mv_rep_4.rds"))
## without phylogeny
meta5 <- rma.mv(es, VCV_shared, random= list(~ 1|species, ~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta5, here("Output", "models", "reproduction", "mv_rep_5.rds"))
## without phylogeny, species or study_code
meta7 <- rma.mv(es, VCV_shared, random= list(~1|obs), data= rdata, method= "REML")
saveRDS(meta7, here("Output", "models", "reproduction", "mv_rep_7.rds"))
} else {
meta4 <- readRDS(here("Output", "models", "reproduction", "mv_rep_4.rds"))
meta5 <- readRDS(here("Output", "models", "reproduction",  "mv_rep_5.rds"))
meta7 <- readRDS(here("Output", "models", "reproduction", "mv_rep_7.rds"))
}
#| echo: false
#| warning: false
#| include: false
#|
if(rerun){
# warm/cool
meta_trait_warm <- rma.mv(es, VCV_shared,  mod= ~warm.cool, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm, here("Output", "models", "reproduction", "mv_rep_warm.rds"))
# warm/cool -1
meta_trait_warm_nointer <- rma.mv(es, VCV_shared,  mod= ~warm.cool-1, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_warm_nointer, here("Output", "models", "reproduction", "mv_rep_warm-1.rds"))
# ref temp
meta_trait_ref <- rma.mv(es, VCV_shared,  mod= ~reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_ref, here("Output", "models", "reproduction", "mv_rep_ref.rds"))
# treat temp centered
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treattemp, here("Output", "models", "reproduction", "mv_rep_ctemp.rds"))
# treat temp^2 centered
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat2, here("Output", "models", "reproduction", "mv_rep_ctemp2.rds"))
# treat temp^3 centered
meta_trait_treat3 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_treat3, here("Output", "models", "reproduction", "mv_rep_ctemp3.rds"))
# diff temp
meta_trait_diff <- rma.mv(es, VCV_shared,  mod= ~diff, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_diff, here("Output", "models", "reproduction", "mv_rep_diff.rds"))
### binned treatment max temperatures.
rdata$bin.temp <- c(NA)
rdata$bin.temp[which(rdata$treattemp >= 40)] <- ">40"
rdata$bin.temp[which(rdata$treattemp >= 35 & rdata$treattemp <40)] <- "35-40"
rdata$bin.temp[which(rdata$treattemp >= 30 & rdata$treattemp <35)] <- "30-35"
rdata$bin.temp[which(rdata$treattemp >= 25 & rdata$treattemp <30)] <- "25-30"
rdata$bin.temp[which(rdata$treattemp >= 20 & rdata$treattemp <25)] <- "20-25"
rdata$bin.temp[which(rdata$treattemp >= 15 & rdata$treattemp <20)] <- "15-20"
rdata$bin.temp[which(rdata$treattemp <15)] <- "<15"
rdata$bin.temp <- factor(rdata$bin.temp)
levels(rdata$bin.temp)
table(rdata$bin.temp)
# binned temps
meta_trait_bintemp <- rma.mv(es, VCV_shared,  mod= ~bin.temp-1,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
saveRDS(meta_trait_bintemp, here("Output", "models", "reproduction", "mv_rep_bintemp.rds"))
} else {
meta_trait_warm  <- readRDS(here("Output", "models", "reproduction", "mv_rep_warm.rds"))
meta_trait_warm_nointer  <- readRDS(here("Output", "models", "reproduction", "mv_rep_warm-1.rds"))
meta_trait_ref <- readRDS(here("Output", "models", "reproduction", "mv_rep_ref.rds"))
meta_trait_treattemp  <- readRDS(here("Output", "models", "reproduction", "mv_rep_ctemp.rds"))
meta_trait_treat2  <- readRDS(here("Output", "models",  "reproduction", "mv_rep_ctemp2.rds"))
meta_trait_treat3  <- readRDS(here("Output", "models",  "reproduction", "mv_rep_ctemp3.rds"))
meta_trait_diff <- readRDS(here("Output", "models", "reproduction", "mv_rep_diff.rds"))
meta_trait_bintemp <-  readRDS(here("Output", "models", "reproduction", "mv_rep_bintemp.rds"))
}
#| label: tbl-treat2
#| tbl-cap: Non-linear effects of temperature on mean effect size of reproduction
table <- data.frame(Parameters = c("Reproduction (mean)", "Linear Treatment Temperature (centered) - Reproduction","Quadratic Treatment Temperature (centered) - Reproduction"),
Est. = round(meta_trait_treat2$b, 4),
`L 95% CI` = round(meta_trait_treat2$ci.lb, 4),
`U 95% CI` = round(meta_trait_treat2$ci.ub, 4),
`p-value` = sapply(round(meta_trait_treat2$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
meta_trait_treat4 <- rma.mv(es, VCV_shared,  mod= ~poly(c_treattemp, degree=4, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
AIC(meta_trait_treat3)
AIC(meta_trait_treat4)
p <- bubble_plot(meta_trait_treat4, mod = "c_treattemp", group="study_code")
p+coord_cartesian(ylim=c(-10,10)) + labs(x = "Temperature deviation from 25C")
summary(meta_trait_treat4)
fitstats(meta_trait_treat4, meta_trait_treat3, meta_trait_treat2)
#| label: tbl-treat2
#| tbl-cap: Non-linear effects of temperature on mean effect size of reproduction
table <- data.frame(Parameters = c("Reproduction (mean)", "Linear Treatment Temperature (centered) - Reproduction","Quadratic Treatment Temperature (centered) - Reproduction"),
Est. = round(meta_trait_treat2$b, 4),
`L 95% CI` = round(meta_trait_treat2$ci.lb, 4),
`U 95% CI` = round(meta_trait_treat2$ci.ub, 4),
`p-value` = sapply(round(meta_trait_treat2$pval,4), function(x) p_value(x)), row.names = NULL, check.names = FALSE)
#| echo: false
#| warning: false
#| include: false
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
#devtools::install_github("daniel1noble/orchaRd", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
getwd()
#| echo: false
#| warning: false
#| include: false
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
#devtools::install_github("daniel1noble/orchaRd", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
#| echo: false
#| warning: false
#| include: false
install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
#devtools::install_github("daniel1noble/orchaRd", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
install.packages("pacman")
install.packages(Rtools)
install.packages("Rtools")
install.packages("metafor")
install.packages("metafor")
summary(meta_trait_treat4)
#| echo: false
#| warning: false
#| include: false
install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
#devtools::install_github("daniel1noble/orchaRd", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
install.packages("pacman")
#| echo: false
#| warning: false
#| include: false
install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
#devtools::install_github("daniel1noble/orchaRd", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
#| echo: false
#| warning: false
#| include: false
#install.packages("pacman")
#devtools::install_github("daniel1noble/metaAidR", force=TRUE)
#devtools::install_github("daniel1noble/orchaRd", force=TRUE)
pacman::p_load(tidyverse, here, ggplot2, rotl, multicomp, dplyr, clubSandwich, tidyr,  metafor, ape, phytools, corrplot, metaAidR, orchaRd, latex2exp, flextable)
