warmdata[c("Temp5", "Mean5", "SD5", "N5", "ani_5")],
warmdata[c("Temp6", "Mean6", "SD6", "N6", "ani_6")],
warmdata[c("Temp7", "Mean7", "SD7", "N7", "ani_7")],
warmdata[c("Temp8", "Mean8", "SD8", "N8", "ani_8")],
warmdata[c("Temp9", "Mean9", "SD9", "N9", "ani_9")])
### make sure escalc uses number of animals not number of
#replicates when i've added these to spreadhseet
ref_temp <- warmdata$ref_temp
ref_mean <- warmdata$ref_mean
ref_sd <- warmdata$ref_sd
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
#calculate_smd_old <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
#  if (is.na(temp2)) {
#    smd <- NA  # Initialize as NA (numeric)
#    smd_v <- NA
#  } else if (rtemp1 > temp2) {
#    smd <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rn1, m2i=mean2, sd2i=sd2, n2i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rani1, m2i=mean2, sd2i=sd2, n2i=ani2)[2]
#  } else if (rtemp1 < temp2) {
#    smd <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
#  } else {
#    smd <- 0
#    smd_v <- 0# rtemp1 equals temp2, so smd is set to 0
#  }
#  Smd <- cbind(smd, smd_v, rtemp1-temp2, rtemp1, temp2)
#  return(Smd)
#}
### calculate pairwise effect sizes for each treatment compared with ref temp
calculate_smd <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
smd <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
smd_v <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2, n)
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Mean1[i], column_sets[[1]]$SD1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Mean2[i], column_sets[[2]]$SD2[i], column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Mean3[i], column_sets[[3]]$SD3[i], column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Mean4[i], column_sets[[4]]$SD4[i], column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Mean5[i], column_sets[[5]]$SD5[i], column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Mean6[i], column_sets[[6]]$SD6[i], column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Mean7[i], column_sets[[7]]$SD7[i], column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Mean8[i], column_sets[[8]]$SD8[i], column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Mean9[i], column_sets[[9]]$SD9[i], column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "diff", "reftemp", "treattemp", "n",
"es.2", "v.2", "diff", "reftemp", "treattemp", "n",
"es.3", "v.3", "diff", "reftemp", "treattemp", "n",
"es.4", "v.4", "diff", "reftemp", "treattemp", "n",
"es.5", "v.5", "diff", "reftemp", "treattemp", "n",
"es.6", "v.6", "diff", "reftemp", "treattemp", "n",
"es.7", "v.7", "diff", "reftemp", "treattemp", "n",
"es.8", "v.8", "diff", "reftemp", "treattemp", "n",
"es.9", "v.9", "diff", "reftemp", "treattemp", "n")
esdata <- rbind(esdata, row)
}
pairwise.test <- esdata
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n")
warmdata <- read.csv("Survival Project Data/Survival project effect size reftemp FF warm.csv")
library(metafor)
# Create a list of column names for each set of columns
column_sets <- list(warmdata[c("Temp1", "Mean1", "SD1", "N1", "ani_1")],
warmdata[c("Temp2", "Mean2", "SD2", "N2", "ani_2")],
warmdata[c("Temp3", "Mean3", "SD3", "N3", "ani_3")],
warmdata[c("Temp4", "Mean4", "SD4", "N4", "ani_4")],
warmdata[c("Temp5", "Mean5", "SD5", "N5", "ani_5")],
warmdata[c("Temp6", "Mean6", "SD6", "N6", "ani_6")],
warmdata[c("Temp7", "Mean7", "SD7", "N7", "ani_7")],
warmdata[c("Temp8", "Mean8", "SD8", "N8", "ani_8")],
warmdata[c("Temp9", "Mean9", "SD9", "N9", "ani_9")])
### make sure escalc uses number of animals not number of
#replicates when i've added these to spreadhseet
ref_temp <- warmdata$ref_temp
ref_mean <- warmdata$ref_mean
ref_sd <- warmdata$ref_sd
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
calculate_smd <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
smd <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
smd_v <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2, n)
return(Smd)
}
calculate_smd <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
smd <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
smd_v <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2, n2)
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Mean1[i], column_sets[[1]]$SD1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Mean2[i], column_sets[[2]]$SD2[i], column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Mean3[i], column_sets[[3]]$SD3[i], column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Mean4[i], column_sets[[4]]$SD4[i], column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Mean5[i], column_sets[[5]]$SD5[i], column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Mean6[i], column_sets[[6]]$SD6[i], column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Mean7[i], column_sets[[7]]$SD7[i], column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Mean8[i], column_sets[[8]]$SD8[i], column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Mean9[i], column_sets[[9]]$SD9[i], column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "diff", "reftemp", "treattemp", "n",
"es.2", "v.2", "diff", "reftemp", "treattemp", "n",
"es.3", "v.3", "diff", "reftemp", "treattemp", "n",
"es.4", "v.4", "diff", "reftemp", "treattemp", "n",
"es.5", "v.5", "diff", "reftemp", "treattemp", "n",
"es.6", "v.6", "diff", "reftemp", "treattemp", "n",
"es.7", "v.7", "diff", "reftemp", "treattemp", "n",
"es.8", "v.8", "diff", "reftemp", "treattemp", "n",
"es.9", "v.9", "diff", "reftemp", "treattemp", "n")
esdata <- rbind(esdata, row)
}
esdata <- as.data.frame(esdata)
pairwise.test <- esdata
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n")
View(pairwise.test)
1*(1:6)
test.1 <- cbind(studydat, pairwise.test[,1*(1:6)])
test.2 <- cbind(studydat, pairwise.test[,2*(1:6)])
test.3 <- cbind(studydat, pairwise.test[,3*(1:6)])
test.4 <- cbind(studydat, pairwise.test[,4*(1:6)])
test.5 <- cbind(studydat, pairwise.test[,5*(1:6)])
test.6 <- cbind(studydat, pairwise.test[,6*(1:6)])
test.7 <- cbind(studydat, pairwise.test[,7*(1:6)])
test.8 <- cbind(studydat, pairwise.test[,8*(1:6)])
test.9 <- cbind(studydat, pairwise.test[,9*(1:6)])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
warmdata <- read.csv("Survival Project Data/Survival project effect size reftemp FF warm.csv")
library(metafor)
# Create a list of column names for each set of columns
column_sets <- list(warmdata[c("Temp1", "Mean1", "SD1", "N1", "ani_1")],
warmdata[c("Temp2", "Mean2", "SD2", "N2", "ani_2")],
warmdata[c("Temp3", "Mean3", "SD3", "N3", "ani_3")],
warmdata[c("Temp4", "Mean4", "SD4", "N4", "ani_4")],
warmdata[c("Temp5", "Mean5", "SD5", "N5", "ani_5")],
warmdata[c("Temp6", "Mean6", "SD6", "N6", "ani_6")],
warmdata[c("Temp7", "Mean7", "SD7", "N7", "ani_7")],
warmdata[c("Temp8", "Mean8", "SD8", "N8", "ani_8")],
warmdata[c("Temp9", "Mean9", "SD9", "N9", "ani_9")])
### make sure escalc uses number of animals not number of
#replicates when i've added these to spreadhseet
ref_temp <- warmdata$ref_temp
ref_mean <- warmdata$ref_mean
ref_sd <- warmdata$ref_sd
ref_ani <- warmdata$ref_ani
ref_N <- warmdata$ref_N
#calculate_smd_old <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
#  if (is.na(temp2)) {
#    smd <- NA  # Initialize as NA (numeric)
#    smd_v <- NA
#  } else if (rtemp1 > temp2) {
#    smd <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rn1, m2i=mean2, sd2i=sd2, n2i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m1i=rmean1, sd1i=rsd1, n1i=rani1, m2i=mean2, sd2i=sd2, n2i=ani2)[2]
#  } else if (rtemp1 < temp2) {
#    smd <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
#    smd_v <- escalc(measure = "SMD", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
#  } else {
#    smd <- 0
#    smd_v <- 0# rtemp1 equals temp2, so smd is set to 0
#  }
#  Smd <- cbind(smd, smd_v, rtemp1-temp2, rtemp1, temp2)
#  return(Smd)
#}
### calculate pairwise effect sizes for each treatment compared with ref temp
calculate_smd <- function(rtemp1, rmean1, rsd1, rani1, rn1, temp2, mean2, sd2, ani2, n2){
if (is.na(temp2)) {
smd <- NA  # Initialize as NA (numeric)
smd_v <- NA
} else if (rtemp1 != temp2) {
smd <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rn1, m1i=mean2, sd1i=sd2, n1i=n2)[1]
smd_v <- escalc(measure = "ROM", m2i=rmean1, sd2i=rsd1, n2i=rani1, m1i=mean2, sd1i=sd2, n1i=ani2)[2]
} else {
smd <- 0
smd_v <- 0 # rtemp1 equals temp2, so smd is set to 0
}
Smd <- cbind(smd, smd_v, temp2-rtemp1, rtemp1, temp2, n2)
return(Smd)
}
esdata <- c()
for(i in 1:nrow(warmdata)){
row <- calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[1]]$Temp1[i], column_sets[[1]]$Mean1[i], column_sets[[1]]$SD1[i], column_sets[[1]]$ani_1[i], column_sets[[1]]$N1[i])
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[2]]$Temp2[i], column_sets[[2]]$Mean2[i], column_sets[[2]]$SD2[i], column_sets[[2]]$ani_2[i], column_sets[[2]]$N2[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[3]]$Temp3[i], column_sets[[3]]$Mean3[i], column_sets[[3]]$SD3[i], column_sets[[3]]$ani_3[i], column_sets[[3]]$N3[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[4]]$Temp4[i], column_sets[[4]]$Mean4[i], column_sets[[4]]$SD4[i], column_sets[[4]]$ani_4[i], column_sets[[4]]$N4[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[5]]$Temp5[i], column_sets[[5]]$Mean5[i], column_sets[[5]]$SD5[i], column_sets[[5]]$ani_5[i], column_sets[[5]]$N5[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[6]]$Temp6[i], column_sets[[6]]$Mean6[i], column_sets[[6]]$SD6[i], column_sets[[6]]$ani_6[i], column_sets[[6]]$N6[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[7]]$Temp7[i], column_sets[[7]]$Mean7[i], column_sets[[7]]$SD7[i], column_sets[[7]]$ani_7[i], column_sets[[7]]$N7[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[8]]$Temp8[i], column_sets[[8]]$Mean8[i], column_sets[[8]]$SD8[i], column_sets[[8]]$ani_8[i], column_sets[[8]]$N8[i]))
row <- cbind(row, calculate_smd(ref_temp[i], ref_mean[i], ref_sd[i], ref_ani[i], ref_N[i], column_sets[[9]]$Temp9[i], column_sets[[9]]$Mean9[i], column_sets[[9]]$SD9[i], column_sets[[9]]$ani_9[i], column_sets[[9]]$N9[i]))
colnames(row) <- c("es.1", "v.1", "diff", "reftemp", "treattemp", "n",
"es.2", "v.2", "diff", "reftemp", "treattemp", "n",
"es.3", "v.3", "diff", "reftemp", "treattemp", "n",
"es.4", "v.4", "diff", "reftemp", "treattemp", "n",
"es.5", "v.5", "diff", "reftemp", "treattemp", "n",
"es.6", "v.6", "diff", "reftemp", "treattemp", "n",
"es.7", "v.7", "diff", "reftemp", "treattemp", "n",
"es.8", "v.8", "diff", "reftemp", "treattemp", "n",
"es.9", "v.9", "diff", "reftemp", "treattemp", "n")
esdata <- rbind(esdata, row)
}
### creating error when N=1 because of SMD formula. dont use for now.
esdata <- as.data.frame(esdata)
pairwise.test <- esdata
studydat <- warmdata[,1:34]
colnames(pairwise.test) <- c("es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n",
"es", "v", "diff", "reftemp", "treattemp", "n")
test.1 <- cbind(studydat, pairwise.test[,1*(1:6)])
test.2 <- cbind(studydat, pairwise.test[,2*(1:6)])
test.3 <- cbind(studydat, pairwise.test[,3*(1:6)])
test.4 <- cbind(studydat, pairwise.test[,4*(1:6)])
test.5 <- cbind(studydat, pairwise.test[,5*(1:6)])
test.6 <- cbind(studydat, pairwise.test[,6*(1:6)])
test.7 <- cbind(studydat, pairwise.test[,7*(1:6)])
test.8 <- cbind(studydat, pairwise.test[,8*(1:6)])
test.9 <- cbind(studydat, pairwise.test[,9*(1:6)])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
View(test.9)
View(pairwise.test)
View(test.1)
View(test.2)
test.1 <- cbind(studydat, pairwise.test[,1:6])
test.2 <- cbind(studydat, pairwise.test[,7:12])
test.3 <- cbind(studydat, pairwise.test[,13:18])
test.4 <- cbind(studydat, pairwise.test[,19:24])
test.5 <- cbind(studydat, pairwise.test[,25:30])
test.6 <- cbind(studydat, pairwise.test[,31:36])
test.7 <- cbind(studydat, pairwise.test[,37:42])
test.8 <- cbind(studydat, pairwise.test[,43:48])
test.9 <- cbind(studydat, pairwise.test[,49:54])
test.1 <- cbind(studydat, pairwise.test[,1:6])
test.2 <- cbind(studydat, pairwise.test[,7:12])
test.3 <- cbind(studydat, pairwise.test[,13:18])
test.4 <- cbind(studydat, pairwise.test[,19:24])
test.5 <- cbind(studydat, pairwise.test[,25:30])
test.6 <- cbind(studydat, pairwise.test[,31:36])
test.7 <- cbind(studydat, pairwise.test[,37:42])
test.8 <- cbind(studydat, pairwise.test[,43:48])
test.9 <- cbind(studydat, pairwise.test[,49:54])
total.test <- rbind(test.1, test.2, test.3, test.4, test.5, test.6, test.7, test.8, test.9)
cleaned_df <- total.test[!is.na(total.test$es),]
View(cleaned_df)
cleaned_df$gtest <- (cleaned_df$es / sqrt(cleaned_df$v)) * cleaned_df$n
length(which(cleaned_df$gtest > 3))
cleaned_df$gtest <- (cleaned_df$es / sqrt(cleaned_df$v)) * sqrt(cleaned_df$n)
length(which(cleaned_df$gtest > 3))
sub <- subset(cleaned_df, diff != 0)
length(which(df$gtest > 3))
length(which(sub$gtest > 3))
cleaned_df$gtest <- (cleaned_df$es / cleaned_df$v) * sqrt(cleaned_df$n)
length(which(sub$gtest > 3))
sub <- subset(cleaned_df, diff != 0)
length(which(sub$gtest > 3))
View(sub)
setwd("C:/Users/ff242/Documents/GitHub/Thermal_Fertility_Meta-Analysis")
load("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
meta_pest <- rma.mv(es, VCV_shared_pest,  mod= ~poly(c_treattemp, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= pest_data, method= "REML")
summary(meta_pest)
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
render("Rmarkdown/meta_analysis_longevity.Rmd")
library(rmarkdown)
library(ggtree)
render("Rmarkdown/meta_analysis_longevity.Rmd")
###-----------------------------------------------------###
### Multilevel meta-analysis using Metafor              ###
### Author: Fay Frost [fay.frost@liverpool.ac.uk]             ###
### Code adapted from Liam Dougherty.
### University of Liverpool                             ###
### Date: August 2023                                   ###
###-----------------------------------------------------###
############################################ Preamble ######################################################
rm(list=ls()) # Clear R environment
library(metafor)
library(ggplot2)
library(ape)
library(rotl)
library(multcomp)
library(dplyr)
library(ggtree)
# To install the orchaRd package:
#install.packages("pacman")
#pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, emmeans)
#devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
library(clubSandwich)
library(rmarkdown)
pacman::p_load(tidyverse, here, metafor, ape, phytools, corrplot, metaAidR)
# source functions
source(here("R", "func.R"))
##########################################################################################################
#--------------#
# 1. Setup     #
#--------------#
### Read in effect size data
effectdata <- read.csv("Data/Survival project all pairwise.es.csv")
### select data for analysis
longdata_warm <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Warm" )
longdata_cool <- subset(effectdata, Trait.category == "Longevity" & warm.cool == "Cool" )
alllong <- rbind(longdata_warm, longdata_cool)
rdata <- alllong
### Species names which need changing for phylogeny.
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea ashmeadi")]              <- "Gonatocerus ashmeadi"
rdata$Species.latin[which(rdata$Species.latin == "Cosmocomoidea triguttata")]   <- "Gonatocerus triguttatus"
rdata$Species.latin[which(rdata$Species.latin == "Mythimna roseilinea")]            <-  "Mythimna albipuncta"
rdata$Species.latin[which(rdata$Species.latin == "Daphnia australis")]            <-  "Daphniopsis australis"
### Create random factors into data frame
rdata$obs <- factor(c(1:nrow(rdata)))                # Unique observation code
rdata$study_code <- factor(rdata$Paper.code)         # Model requires column names study_code (this is biggest level of nested code structure)
rdata$Species.phylo <- factor(rdata$Species.latin)   # Species names for phylo matrix
rdata$species <- factor(rdata$Species.latin)         # Another species column for ranom factor
precision <- sqrt(1/rdata$v)                         # inverse standard error
rdata[,"precision"] <- precision
str(rdata)
nlevels(rdata$species)    # Check number of species
nlevels(rdata$study_code) # Check number of studies
#### Import Tree #############
tree1 <- read.nexus("Phylogeny/all_long_excHUM251_tree.nex")
tree_grafen = compute.brlen(tree1, method="Grafen", power=1)
tree <- ape::multi2di(tree_grafen, random = TRUE)
phylo_matrix <- vcv(tree_grafen, cor=TRUE, model="Brownian") # Make phylogenetic matrix
# use a randomization approach to deal with polytomies.
# Could this this approach or another detailed here: https://search.r-project.org/CRAN/refmans/RRphylo/html/fix.poly.html
########################################    Models   #### ######################################################
#--------------------------#
# 2. Random Effects Models #
#--------------------------#
# Simple model (no random effects)
meta1 <- rma.uni(es, v, data= rdata, method= "REML")
summary(meta1)
# Adding four random factors
meta2 <- rma.mv(es, v, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
summary(meta2)
i2_ml(meta2, method=c("ratio")) # Heterogeneity at each random factor level
# Accounting for non-independence of data points from the same experiment
# Assumes a correlation of 0.5 between effect sizes from the same experiment
rdata$shared_control <- factor(rdata$Effect.size.code)
VCV_shared <- impute_covariance_matrix(vi=rdata$v, cluster = rdata$shared_control, r=0.5)
# Add new shared_control variance matrix into the mixed-effects meta-analysis model
meta3 <- rma.mv(es, VCV_shared, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),
R= list(Species.phylo = phylo_matrix), data= rdata, method= "REML")
summary(meta3)
i2_ml(meta3, method=c("ratio"))
meta3_contain <-  rma.mv(es, VCV_shared, random= list(~ 1|Species.phylo, ~ 1|species, ~ 1|study_code, ~1|obs),     #gives same results
R= list(Species.phylo = phylo_matrix), data= rdata, test="t", dfs="contain", method= "REML")
## without phylogeny or species
meta4 <- rma.mv(es, VCV_shared, random= list(~ 1|study_code, ~1|obs), data= rdata, method= "REML")
summary(meta4)
i2_ml(meta4, method=c("ratio"))
meta4_contain <-  rma.mv(es, VCV_shared, random= list(~ 1|study_code, ~1|obs), data= rdata, test="t", dfs="contain", method= "REML") #gives same results
## without phylogeny
meta5 <- rma.mv(es, VCV_shared, random= list(~ 1|species, ~ 1|study_code, ~1|obs), data= rdata, method= "REML")
summary(meta5)
i2_ml(meta5, method=c("ratio"))
meta5_contain <- rma.mv(es, VCV_shared, random= list(~ 1|species, ~ 1|study_code, ~1|obs), data= rdata, test="t", dfs="contain", method= "REML") #gives same results
## without phylogeny, species or study_code
meta7 <- rma.mv(es, VCV_shared, random= list(~ 1|obs), data= rdata, method= "REML")
summary(meta7)
i2_ml(meta7, method=c("ratio"))
meta7_contain <- rma.mv(es, VCV_shared, random= list(~ 1|obs), data= rdata, test="t", dfs="contain", method= "REML") #gives same results
####
#-----------------------#
# 3. Meta-regressions   #
#-----------------------#
# Single categorical factor added as a fixed effect
# warm/cool
meta_trait_warm <- rma.mv(es, VCV_shared,  mod= ~warm.cool, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_warm)
# warm/cool -1
meta_trait_warm_nointer <- rma.mv(es, VCV_shared,  mod= ~warm.cool-1, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_warm_nointer)
# ref temp
meta_trait_ref <- rma.mv(es, VCV_shared,  mod= ~reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_ref)
# treat temp
meta_trait_treattemp <- rma.mv(es, VCV_shared,  mod= ~c_treattemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treattemp)
# treat temp^2
meta_trait_treat2 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=2, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treat2)
# treat temp^3
meta_trait_treat3 <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=3, raw=TRUE), random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_treat3)
saveRDS(meta_trait_treat3, here("output", "models", "meta_longevity_3.rds"))
meta_train_treat3_contain <- rma.mv(es, VCV_shared,  mod= ~ poly(c_treattemp, degree=3, raw=TRUE),   ## gives same results
random= list(~ 1|study_code,  ~1|obs), data= rdata, test="t", dfs = "contain", method= "REML")
# diff temp
meta_trait_diff <- rma.mv(es, VCV_shared,  mod= ~diff, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_diff)
# all fixed effects
meta_trait_all <- rma.mv(es, VCV_shared,  mod= ~warm.cool + diff + treattemp + reftemp, random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_all)
### binned treatment max temperatures.
rdata$bin.temp <- c(NA)
rdata$bin.temp[which(rdata$treattemp >= 40)] <- ">40"
rdata$bin.temp[which(rdata$treattemp >= 35 & rdata$treattemp <40)] <- "35-40"
rdata$bin.temp[which(rdata$treattemp >= 30 & rdata$treattemp <35)] <- "30-35"
rdata$bin.temp[which(rdata$treattemp >= 25 & rdata$treattemp <30)] <- "25-30"
rdata$bin.temp[which(rdata$treattemp >= 20 & rdata$treattemp <25)] <- "20-25"
rdata$bin.temp[which(rdata$treattemp >= 15 & rdata$treattemp <20)] <- "15-20"
rdata$bin.temp[which(rdata$treattemp <15)] <- "<15"
rdata$bin.temp <- factor(rdata$bin.temp)
levels(rdata$bin.temp)
table(rdata$bin.temp)
# binned temps
meta_trait_bintemp <- rma.mv(es, VCV_shared,  mod= ~bin.temp-1,  random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_trait_bintemp)
## Publication Bias.
meta_year <- rma.mv(es, VCV_shared,  mod= ~Publication.year,
random= list(~ 1|study_code,  ~1|obs), data= rdata, method= "REML")
summary(meta_year)
# Sensitivty Analysis
# Preform a sensitivity analysis by removing the smallest and largest 2.5% of effect sizes.
minq <- quantile(rdata$es, 0.025)
maxq <- quantile(rdata$es, 0.975)
sdata <- subset(rdata, es > minq & es < maxq)
## Treatment temperature as a cubic effect (sesnsitivity analysis)
# re-cmpute the covariance matrix for subsetted data
VCV_shared_sa <- impute_covariance_matrix(vi=sdata$v, cluster = sdata$shared_control, r=0.5)
# re-run cubic model
meta_sa_treat3 <- rma.mv(es, VCV_shared_sa,  mod= ~ poly(c_treattemp, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
summary(meta_sa_treat3)
# re-run binned temps model
meta_sa_bintemp <- rma.mv(es, VCV_shared_sa,  mod= ~bin.temp-1,
random= list(~ 1|study_code,  ~1|obs), data= sdata, method= "REML")
summary(meta_sa_bintemp)
###########################################################################################################
# Other fixed effects
## Sex exposed
# We could lump categories so that we have cases where males are included (Both, Male), versus cases with just females (Female, Parthenogenetic),
# with Unsure removed. I would predict that the 'Both' category would show the biggest drop for reproduction, but there will be no difference for lifespan
new_data <- rdata
new_data$Sex.exposed[which(new_data$Sex.exposed == "Male")] <- "Both"
new_data$Sex.exposed[which(new_data$Sex.exposed == "Parthenogenetic")] <- "Female"
new_data <- subset(new_data, Sex.exposed != "Unsure")
VCV_shared_sex <- impute_covariance_matrix(vi=new_data$v, cluster = new_data$shared_control, r=0.5)
meta_treat_sex <- rma.mv(es, VCV_shared_sex,  mod= ~poly(c_treattemp, degree=3, raw=TRUE)*Sex.exposed,
random= list(~ 1|study_code,  ~1|obs), data= new_data, method= "REML")
## Life-stage
# We could lump categories so that we have cases where only adults were exposed (Adult),
# versus cases where immature stages were exposed (Juvenile, Larvae, Pupae, Mix)- perhaps after excluding 'Egg' and 'Embryo' because these categories are a bit weird
ls_data <- rdata
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Juvenile")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Larvae")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Mix")] <- "Immature"
ls_data$Life.stage.of.animal[which(ls_data$Life.stage.of.animal == "Pupae")] <- "Immature"
ls_data <- subset(ls_data, Life.stage.of.animal != "Egg")
ls_data <- subset(ls_data, Life.stage.of.animal != "Embryo")
VCV_shared_life <- impute_covariance_matrix(vi=ls_data$v, cluster = ls_data$shared_control, r=0.5)
meta_treat_ls <- rma.mv(es, VCV_shared_life,  mod= ~poly(c_treattemp, degree=3, raw=TRUE)*Life.stage.of.animal,
random= list(~ 1|study_code,  ~1|obs), data= ls_data, method= "REML")
### Pest species
### pest
pest_data <- subset(rdata, Agricultural.importance == "Pest")
VCV_shared_pest <- impute_covariance_matrix(vi=pest_data$v, cluster = pest_data$shared_control, r=0.5)
meta_pest <- rma.mv(es, VCV_shared_pest,  mod= ~poly(c_treattemp, degree=3, raw=TRUE),
random= list(~ 1|study_code,  ~1|obs), data= pest_data, method= "REML")
summary(meta_pest)
save.image("~/GitHub/Thermal_Fertility_Meta-Analysis/Output/longevity_meta_analysis_output.RData")
render("Rmarkdown/meta_analysis_longevity.Rmd")
render("Rmarkdown/meta_analysis_longevity.Rmd")
